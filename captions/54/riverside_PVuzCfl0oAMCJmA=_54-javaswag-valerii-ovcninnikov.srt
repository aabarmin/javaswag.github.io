1
00:00:03,374 --> 00:00:04,374
С вами был Игорь Негода.

2
00:00:16,622 --> 00:00:25,622
Мне одна группника сказала, говорит, смотри, есть курсы в институте, там короли джавы ведут.
Тогда говорят, пишите маленькие методы на джаве.

3
00:00:25,622 --> 00:00:31,902
Имеют в виду совершенно не только красоту, но еще и то, что они умеют компилироваться.

4
00:00:35,182 --> 00:00:39,702
Все самые сильные разработчики, они так или иначе.
Когда-то писали на Джаве.

5
00:00:45,166 --> 00:00:53,646
Всем привет! В эфире подкаст Jawa Swag. С вами я, ведущий Дим Валыхин.
Сегодня у нас в гостях Валерий Ховчинников, инжинирик-менеджер

6
00:00:53,646 --> 00:01:07,974
в одной из бихтех-компаний в России. Валерий, привет!
С Валерием мы долгое время пытались созвониться и записать подкаст.

7
00:01:07,974 --> 00:01:19,894
Я подписан на его телеграм-канал с классным названием «Квант Валерин».
Очень-очень классное название. Так что слушайте, сразу реклама, зайдите в телеграм-канал, посмотрите.

8
00:01:19,894 --> 00:01:34,848
Очень интересный контент для тех, кто увлекается всякими платежными системами
и таким вот технологичными точки зрения. еще не знает Валер, не могу ты немного представиться, рассказать о себе и вообще

9
00:01:34,848 --> 00:01:47,788
как ты относишься к javi и у нас же все-таки java podcast, вот как бы подвяжи историю
о себе плавно к тому как ты пришел в java. Так, хорошо, я программировал на java лет

10
00:01:47,788 --> 00:02:03,478
10, может быть даже немножко больше и в основном это все было связано с
финансовым каким-то стэком. Давай я расскажу немножко, наверное, как я вкатился.

11
00:02:03,478 --> 00:02:20,094
Не очень интересная история, но полезная. У меня очень долго не получалось начать делать какие-то серьезные вещи.
То есть в школе мне нравилось программирование на паскале, вот эти задачки порешать. Это все было понятно и легко.

12
00:02:20,094 --> 00:02:42,574
Но как только я хотел сделать что-то, чем можно попользоваться, что-то для себя, автоматизировать, вообще не получалось просто от слова никак.
И в институте я пробовал. Сначала у нас были курсы по C, кое-как их там сдавал, по Assembler'у, там тоже с грехом пополам.

13
00:02:43,534 --> 00:02:52,214
И какие-то C++ были у людей в параллели, но у нас совершенно это всё...

14
00:02:55,474 --> 00:03:04,214
Короче, это была слабая такая сторона у меня.
Мне одна группник сказала, говорит, смотри, есть курсы в институте, там короли Java ведут.

15
00:03:04,214 --> 00:03:10,734
Прям так и сказала, я на всю жизнь запомнил.
Это компания Netcracker организовывала тогда.

16
00:03:11,086 --> 00:03:25,006
учебные центры в разных университетах. Я насколько знаю, в этом году, или даже в прошлом уже их закрыли временно,
потому что они остановили наим. Но супер курсы были тогда. Я вписался, пошел.

17
00:03:26,086 --> 00:03:36,846
Очень интересная история опять есть у меня в канале, как я на эти курсы попал, учитывая то, что тесты я написал очень плохо
по программированию. Но в итоге очень сильно

18
00:03:37,606 --> 00:03:45,478
много времени тратил на то, чтобы этим позаниматься.
Мне это всё зашло, прям супер было классно, интересно.

19
00:03:45,478 --> 00:03:50,318
Я ходил в тряс своего друга, программиста, который
тогда в Google работал, говорю, ну учи, помоги, я не могу

20
00:03:50,318 --> 00:04:02,838
домашку сделать. И как-то-как-то, потихонечку, за полгода я достаточно
хорошо прокачал себе джаву, чтобы даже попасть в такой

21
00:04:02,838 --> 00:04:12,782
предотбор тех, кого позвали на работу через полгода
обучения на портайм. Ну и более того, я прошел собеседование, начал работать в Меткрекере порттаймером.

22
00:04:13,622 --> 00:04:26,902
Даже несколько команд предложили мне выбрать, к кому пойти.
Это опять же очень повезло. Я попал в ту команду, которая была географически близко, мне надо было ездить никуда.

23
00:04:27,222 --> 00:04:42,186
Вот, там Enterprise Java, EGB, даже по-моему EGB 1.0 были где-то там в ядре.
Очень всё сложно, ничего не понятно, какие-то веб-лоджики, всё очень сложно.

24
00:04:43,686 --> 00:04:54,086
Но, тем не менее, была и такая ванильная джава немножечко.
Её у нас специальный отдел System Performance проталкивал.

25
00:04:55,526 --> 00:05:04,046
Там как раз известный в джавом мире Володя Ситников работал.
И они этим отделом очень часто закидывали какие-то квизы.

26
00:05:05,934 --> 00:05:39,206
интересные. Ээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээ
Очень интересно было смотреть вот эти вещи, учиться у людей, которые настолько глубоко знали язык.

27
00:05:42,206 --> 00:05:55,206
Но у меня конкретно задачки были не самые интересные. Я пытался там внутри как-то сротироваться, но не пошло.
И позвали в Deutsche Bank, а тогда это прямо рассказывали, что такое место, это прям там такие космолеты строят, ребята.

28
00:05:56,206 --> 00:06:08,046
Там high frequency tracing, там все очень круто.
Я пошел туда, за этим всем очень крутым, и немножечко мне удалось все-таки потрогать.

29
00:06:08,046 --> 00:06:22,046
Я там делал систему для risk management, которая показывала...
В общем, для сделок по обмену валютой система показывала риски, считала их real-time,

30
00:06:22,046 --> 00:06:33,278
и у нас были довольно жесткие SLA по там какие-то...
99% у нас был меньше 5 мс. Вот так вот я могу сказать от входа до выхода.

31
00:06:33,278 --> 00:07:03,294
Очень много занимало времени GC-тюнинг. Там мой темлит, с которым мы вдвоем это все писали, научил меня всяким очень грязным хаком в джаве, как писать garbage free код, как делать low latency приложение на джаве.
Это тоже был офигительный опыт. Наши приложения, которые мы там делали, они, во-первых,

32
00:07:03,894 --> 00:07:15,494
внутри Deutsche Bank были очень популярны. Опять же, просто мне повезло, что
мы переделывали, это Reengineering проекты были, мы переделывали старые продукты, которые всех бесили.

33
00:07:15,494 --> 00:07:26,598
Мы делали круто. И поэтому бизнес был очень доволен, нам там давали какую-то...
международную внутри дачи банковскую награду как самый инновационно крутой проект

34
00:07:26,598 --> 00:07:40,018
какую-то стекляшку подарили даже начальнику
вот но интересно что этот проект был настолько популярен что трейдеры которые уходили в

35
00:07:40,018 --> 00:07:49,294
другие банки захотели там такое же и очень много было запросов
снаружи на ребят, которые работали в моей команде,

36
00:07:49,294 --> 00:07:53,454
на то, чтобы их перевести в другой банк, чтобы сделали так же хорошо.

37
00:07:56,574 --> 00:08:13,166
Вот. Классный, интересный опыт. Потом я решил попробовать в стартапе поработать и сходил в Revolut.
Мне не очень зашло. После всех вот этих трейдинговых штук с простой на математикой, с какими-то

38
00:08:14,046 --> 00:08:23,766
перформанс-оптимизациями, я пришел, а там веб-сервисы писать.
Просто какие-то их вот эти ручки. Перекладывание джейсонов.

39
00:08:24,606 --> 00:08:37,694
Я загрустил. поделал там сервис по расчету кредитного рейтинга.
Это меня немножко повеселило, потому что там тоже что-то пришлось посчитать.

40
00:08:37,694 --> 00:08:44,494
Но опять же, он очень быстро сделался и кончился.
И я решил, что надо пойти снова торговать.

41
00:08:45,534 --> 00:08:52,614
Так попал в райфайзенбанк. И в райфайзенбанке мы уже настоящим хардкором занимались.

42
00:08:57,518 --> 00:09:20,078
Опять же со своим бывшим начальником из Deutsche Bank мы вдвоем делали опционный трейдинг полностью с нуля.
Ничего не было в райфайзе, не было. Нас позвали, точнее позвали начальника, а он позвал меня делать уже торговлю валютными опционами.

43
00:09:20,078 --> 00:09:35,662
На самом деле получилось... Очень быстро. Мы прототипировали на коленке за полгода полностью автоматическую торговлю.
И ребята из индустрии общались с разными трейдерами.

44
00:09:35,662 --> 00:09:42,862
С других банков они в шоке вообще. Как это можно за полгода?
Просто они не видели, что там в исходниках.

45
00:09:42,862 --> 00:09:45,662
Так бы все было понятно.

46
00:09:49,614 --> 00:10:02,174
Вот, в Rive тоже позанимались немножко какими-то оптимизациями,
подписал и лог-фри алгоритмы, и какой-то low latency-код,

47
00:10:02,174 --> 00:10:20,974
и потрогал немножко C++, слава богу немножко, моих навыков очень мало хватает.
И в какой-то момент решил, что это надо. в область с меньшим психологическим напряжением переходить.

48
00:10:20,974 --> 00:10:38,958
Поэтому перешел вот в БигТех, где обещали смузи, массаж и сырки на кофепоинтах.
Так и стал инжиниринг-менеджером. Да, слушай, ты прям очень много покрыла времени, которое...

49
00:10:38,958 --> 00:10:49,758
Ну, своей карьерой. Я бы хотел немножко углубиться в тему, то, что ты сказал, что
самым как бы основным штуком и самым основным каким-то там...

50
00:10:49,758 --> 00:11:00,478
Как писать GC-free код и всяким таким именно на чистый джави, вот ты научился в дойче.
А есть какие-то примеры того, как писать на джави, типа...

51
00:11:00,686 --> 00:11:11,686
Вот на чистой джаве так чтобы было быстро. То есть какие вы там техники использовали?
Что обычно было? Это были какие-то просто, знаешь, добавь кэш?

52
00:11:11,686 --> 00:11:23,686
Либо что там, не знаю, замени базу? Либо это было все-таки в джаве какие-то там, не знаю,
своеобразный стиль написания кода? Нет, базы нет, если ты хочешь LoL At&C,

53
00:11:23,686 --> 00:11:37,166
то надо все в InMemory делать. Эмм... На самом деле...
Есть несколько трюков, но стоит думать скорее об архитектуре компьютера, когда ты что-то делаешь.

54
00:11:37,166 --> 00:11:50,686
Скорее уже в эту глубину дальше я пошел в райфе, а первые трюки в Dohich as well.
Ну, трюки на самом деле спорные, если уж на то пошло.

55
00:11:50,686 --> 00:12:04,978
Тем не менее, на момент какой-то 2013-2014 год работали прекрасно.
например, вместо того чтобы использовать объекты и хранить их в...

56
00:12:06,926 --> 00:12:22,926
в какой-то структуре данных, например, в мапе, ты хранишь несколько массивов,
и в этих массивах поля объектов. Соответственно, у тебя нет такого, что по индексу 1 лежит какой-то нужный тебе объект.

57
00:12:22,926 --> 00:12:35,926
Ты по индексу 1 в каждом из массивов можешь получить нужное тебе поле этого объекта, а самого объекта не существует.
Таким образом, ты экономишь на локациях и иногда будешь Collection.

58
00:12:36,430 --> 00:12:47,950
Второй прием оттуда, который я помню, это пулы объектов.
С ними сложность в том, что зачастую low-latency архитектуры

59
00:12:47,950 --> 00:12:55,054
это такие конвейеры, и поэтому тебе нужно...
часто передавать объекты из одного потока в другой.

60
00:12:55,054 --> 00:13:04,494
Соответственно, тебе нужно какой-то безопасный пул держать, чтобы объекты в него можно было возвращать.
Но при этом ты не хочешь, чтобы это была, например, блокирующая очередь.

61
00:13:04,494 --> 00:13:17,774
Потому что в какой-то... один момент ты можешь на этой очереди встать, и всё станет плохо, и тебе не продолжать работать.
Вот. Собственно, конвертная архитектура — это must-have.

62
00:13:17,774 --> 00:13:37,662
Это тоже трюк, который я там освоил. что многие называют Disruptor, потому что видимо придумали те же ребята, что придумали Disruptor.
Возможно придумал Мартин Томпсон, я не знаю кто это придумал, но смысл в том, что ты не хочешь

63
00:13:37,662 --> 00:13:46,902
многопоточную программу в принципе. Однопоточный код всегда работает быстрее, но есть но. Для того,

64
00:13:50,542 --> 00:14:01,622
конкретно от входа до выхода ты можешь разбить
обработку своего сообщения на несколько этапов, каждый этап обрабатывать в отдельном потоке, то есть ты в одном потоке

65
00:14:02,022 --> 00:14:19,622
обработал, передал в следующий и он занимается каким-то этапом, таким образом у тебя есть просто несколько циклов
например по количеству ядер и ты, ну например, пришло сообщение, ты в первом потоке его десерилизовал, положил в какую-то очередь, второй поток

66
00:14:19,982 --> 00:14:34,282
из очереди забрал, посчитал по этому объекту, положил посчитанное в третьей очереди.
Третий поток из очереди забрал, сериализовал и отправил по сети, например.

67
00:14:34,282 --> 00:14:46,042
Ну я лутрирую, в целом примерно так и выглядит.
Какие еще будут интересные приемы? Ну а не получается тут так, что вот смотри, ну вот сейчас какой-нибудь разработчик...

68
00:14:46,766 --> 00:14:57,406
слушать нас, ну подожди, вот у меня восьмиядерный компьютер, и что у меня? 8 всего потоков и
8 очередей, а если мне менеджер говорит, слушай, там нужно 9 какой-то вставить

69
00:14:58,286 --> 00:15:07,246
фильтр, ну все, надо переезжать на компьютер, в котором есть
больше чем 8 ядер, ну как это происходит или

70
00:15:07,686 --> 00:15:22,646
такой проблемы нет, мы просто как бы, суть в том, что мы пиним
к какому-то, то есть поток должен занять какое-то там, какое-то ядро и только им овладеть, а дальше нас не волнуют, что будет происходить.

71
00:15:22,646 --> 00:15:34,566
Очень сильно зависит, то есть что ты хочешь. Всегда зависит от конкретной задачи. В случае, когда там какой-то hard, real-time люди пытаются делать, конечно,

72
00:15:39,118 --> 00:15:47,378
В случае, когда у тебя на самом деле commodity, просто
говоришь low latency, у всех разные немножко понятия,

73
00:15:47,378 --> 00:15:58,998
что такое low, у кого-то там 1 мс это уже много, а у
кого-то low это 100 мс. Я сейчас провожу архитектурные секции собеседования.

74
00:15:59,918 --> 00:16:10,918
дизайн и там low latency это совсем не то low latency, которое я знаю.
Ну кстати вот если проводишь это прям интервью, то спрашиваешь вот сколько

75
00:16:10,918 --> 00:16:38,158
low latency по времени, вот какие тебе ответы дают, вот сколько примерно разработчики
считают для них low. Так как я сейчас не собеседую на Low Latency Java разработку, то есть это не трейдинг какой-то, а это скорее какие-то высоко нагруженные системы, то тут ребята говорят, что 100 мс это Low Latency, 200 – нормально, до 500 человек практически не замечается.

76
00:16:38,574 --> 00:16:48,074
значит норм. Ну то есть это совершенно, ну то есть это все еще low latency, ну такой
вебный low latency. Low latency для браузера просто потому что человек как бы не успевает

77
00:16:48,074 --> 00:17:00,814
увидеть, что там не знаю, обновились данные там типа на странице. А другой low latency
это когда типа там вот как ты говоришь 99% там 5 мс. Это как бы в 100 раз

78
00:17:00,814 --> 00:17:13,628
поменьше, либо даже не знаю сколько, в тысячу раз поменьше. Все так да, и
именно торговли тебе важны в зависимости от того чем конкретно ты занимаешься

79
00:17:13,628 --> 00:17:24,368
тебе важны уже около там миллисекундные задержки
и это все еще не микро секунды когда мы там делаем какой-то именно hft

80
00:17:24,368 --> 00:17:32,348
где ты хочешь там десятки микро секунд в плохом случае
здесь когда у тебя есть возможность миллисекундами заниматься

81
00:17:32,348 --> 00:17:41,438
ты можешь себе даже context switch позволить
Микросекунд 50 наверное, займёт. Это нормально, типа, ещё хватит, можешь несколько раз успеть.

82
00:17:41,438 --> 00:17:50,038
Можешь даже локи использовать и всё хорошо.
В таких случаях ты можешь на одно ядро запинить какие-нибудь ио-потоки,

83
00:17:50,038 --> 00:18:03,558
потому что, какая разница, они всё равно в CPU эти сидят всё время.
Ты отправил и всё, это свидание. А на какие-то вычисления уже используют потоки, которые запинены на ядра.

84
00:18:04,398 --> 00:18:17,590
Ну и эти ядра можно через C группус, например, изолировать и никому не отдавать.
Можно другими способами пинить то. А вот такой вопрос. Давай попробуем как-то мысленно разделить для нашего слушателя,

85
00:18:17,590 --> 00:18:27,750
у которого перед глазами нет ничего перед глазами, а просто в наушниках наш подкаст.
Смотри, есть две системы. Два типа системы, допустим.

86
00:18:27,750 --> 00:18:37,850
Есть та система, которая отвечает за меньше, чем 500 мс.
И в этой системе можем использовать хэш-мапы, можем использовать какие-то локи,

87
00:18:37,850 --> 00:18:52,464
можем использовать все, что есть в джайве. хорошо. А есть системы, в которых нужно, которые
должны отвечать за меньше, чем 5 мс. И там уже нельзя

88
00:18:52,464 --> 00:18:59,684
использовать, например, какие-то штуки из Java, например,
как ты сказал, локи, либо, например, нужно использовать

89
00:18:59,684 --> 00:19:11,158
вместо hashmaps какие-то свои трюки, своеобразные библиотеки
использовать из Java. Какие... Что еще нельзя использовать в таких вот именно low-light-системах?

90
00:19:11,158 --> 00:19:17,238
Что там? Только примитивы и массивы, собственно, и все.
И как бы... И джава ли вообще это? Ведь у нас же...

91
00:19:17,238 --> 00:19:28,278
У джавы же она и славится тем, что там вокруг этих библиотек, вокруг всего этого полно.
Ну, то есть всяких этих классных штучек, которые можно использовать.

92
00:19:28,278 --> 00:19:39,810
То есть получается, мы на джаве пишем только вот, как бы, используя самые базовые какие-то конструкции.
Темы хороша от Java, что очень большая широкая экосистема.

93
00:19:39,810 --> 00:19:50,710
То есть у тебя есть, например, вместо стандартных очередей, которые написаны,
у тебя есть специальные очереди, например, для single producer, single consumer,

94
00:19:50,710 --> 00:19:59,010
которые будут использовать другую семантику, другую memory-модель.
То есть они возьмут release-acquire, и все будет у тебя работать пошустрее,

95
00:19:59,010 --> 00:20:11,558
если твой процессор хорош. Правильной архитектуры. Давайте так.
чтобы не углубляться. Потом ты можешь взять... Это вообще первая вещь, с которой знакомишься,

96
00:20:11,558 --> 00:20:20,478
когда начинаешь программировать что-то финансовое. Это хэштаблицы с открытой адресацией.
Раньше это были какие-то Goldman Sachs collections, Colobog collections и прочее.

97
00:20:20,478 --> 00:20:33,638
Там прям throw в collections, по-моему. Я помню, что с Т начинались все названия коллекций.
Как это назывались, не помню. Почему, опять же, да, с открытой адресацией используются здесь

98
00:20:35,662 --> 00:20:46,762
Последовательные чтения в памяти работают быстрее, чем как в стандартной хэшмапе
коллизии разрешаются цепочками, это будут хопы по памяти.

99
00:20:46,762 --> 00:20:55,722
То есть у тебя каждый раз это какой-то прыжок за новым объектом.
С открытой адресацией этих прыжков меньше, и соответственно она работает шустрее.

100
00:20:55,722 --> 00:21:13,126
Если ты еще и примитивы берешь, то опять же коллекция с примитивами всегда есть в...
всех этих библиотеках, то это еще меньше прыжков по памяти, потому что тебе не нужно прыгать в объект,

101
00:21:13,126 --> 00:21:27,246
ты можешь прямо in place лежать, складывать в массив примитивы, все будет работать шустрее. Есть
Chronicle, они дают как платные, так и бесплатные библиотеки, и у них есть вообще невероятно

102
00:21:27,246 --> 00:21:38,030
крутые штуки, типа, раньше как мы делали, мы в unsafe, строчки.
складывали в массивчике, чтобы не делать объекты, и ты вот это перекладываешь

103
00:21:38,470 --> 00:21:50,690
это конечно прикольно, но у Chronicle еще круче есть, они короткие строчки, научились мапить в
long и у тебя просто long везде, над которым есть обертка, которая

104
00:21:51,270 --> 00:22:02,510
у которой нет объекта анастатической, и это круто работает, то есть ты можешь при этом
читать, писать нормально, видеть, что, какие данные передаются

105
00:22:03,534 --> 00:22:12,174
Влоги пишешь нормально, по сети можешь отправлять нормально.
При этом у тебя внутри приложения используется не массив байта, просто лонг.

106
00:22:12,174 --> 00:22:28,398
Это очень круто. И таких библиотек очень много, и они гораздо лучше, чем те решения, которые мы же делали внутри у себя.
Слушай, классно, я вот такого как-то даже слышу про то, что упаковывают всякие там

107
00:22:28,398 --> 00:22:42,158
во всякие там интеджеры, массивы интеджеров, чтобы это было как-то по плотнее, вот, но вот то,
что прям строчки упаковывают прямо в лонге, такого, такого я не слышал. Кстати, для слушателей вот

108
00:22:42,158 --> 00:22:56,558
еще одно я вспомнил, у нас когда-то, у нас уже больше 50 выпусков и в первые десятки выпусков у
Роман Левентов. И он, по-моему, если не ошибаюсь фамилии, по-моему, он как раз

109
00:22:56,558 --> 00:23:05,718
рассказывал про Хроникал-мапы, про библиотеку Калабоке.
Очень, по-моему, интересный выпуск получился.

110
00:23:05,718 --> 00:23:15,518
Отличная отсылка, наверное, от 50 плюс выпуска туда,
в прошлое, когда был еще такой… Подказ мы записывали

111
00:23:15,518 --> 00:23:27,694
через… через Skype наушники с микрофоном. Вот, и да, я знаю этот набор библиотек,
я, к сожалению, с этим не работал, только какие-то примеры запускал.

112
00:23:27,694 --> 00:23:33,374
Знаешь, ты там вкачаешь «Кроникл МАП», загружаешь,
кладешь сюда объекты, вычитываешь, такой «Вау!»

113
00:23:33,374 --> 00:23:42,294
Короче, читается. Да, да, да. Ну, то есть буквально,
буквально как какие-то такие, просто по деле дел.

114
00:23:42,294 --> 00:23:53,568
Вот, интересно то, что все эти библиотеки выросли как раз из того,
из какого-то high frequency trading, то есть для нужд определенной конкретной области,

115
00:23:53,568 --> 00:24:11,154
где тебе как бы все что... тебе все, что там, всякие объекты, строки, тебе все нужно упаковывать в какие-то примитивные типы,
потому что примитивные типы, они вот как-то с гарбич-коллектором работают получше.

116
00:24:11,154 --> 00:24:22,694
То есть получается, это вот такая вот идея, что мы все берем и пытаемся как можно сильнее ужать,
чтобы избавиться от гарбич-коллектора. То есть только гарбич-коллектор наш враг,

117
00:24:22,694 --> 00:24:38,548
либо есть еще что-то, что мешает нам писать вот такие как бы быстрые системы.
коллектор не такой уж большой враг потому что ты же хочешь не только без мусора писать ты

118
00:24:38,548 --> 00:24:56,148
еще хочешь писать с хорошим паттерном по памяти потом о чем я и говорил смысл в чем что прыгать
по памяти очень плохо ты не хочешь этого делать и хочешь читать последовательно это такой базовый

119
00:24:58,318 --> 00:25:10,438
такой санитарный, пожалуйста не прыгайте по памяти, ходите последовательно.
Все очень аккуратненько будет кэшироваться в процессоре, все будет хорошо лежать в кэшах,

120
00:25:10,438 --> 00:25:24,038
быстро подтягиваться повыше, все будет очень быстро считаться и работать.
Это супер круто, потому что память сильно медленнее, чем процессор, и нужно работать над ней.

121
00:25:24,038 --> 00:25:37,214
Но... Что еще можно делать? Чем наджава? Мне кажется, практически никто не занимается уже.
Можно смотреть и на branchpredicter, и на джит.

122
00:25:37,214 --> 00:25:53,814
То есть, что они там делают. Ну, например, очень люблю вопрос на собеседование. Сейчас заспылил кусочки небольшие.
Про сортировки маленьких массивов. Какие сортировки? Выбирать для того, чтобы сортировать коротенькие массивы.

123
00:25:54,734 --> 00:26:04,454
И на практике чаще всего выигрывает insertion sort сортировка вставками
Хотя она квадратичная во-первых, во-вторых, но довольно примитивная

124
00:26:04,454 --> 00:26:11,414
Не очень понятно почему, если маленький массив, он влезает в кэш
и как бы у тебя кэра есть квиксорт или insertion sort

125
00:26:11,414 --> 00:26:19,574
Суть в том, что у сортировки вставками очень мало бранча миспредикшенов
Потому что она все время в одну сторону двигает элементы

126
00:26:19,574 --> 00:26:34,358
И у нее на один элемент один промах Или даже меньше, средний
Поэтому она довольно шустро работает. И таких вещей довольно много, которые встречаются.

127
00:26:34,358 --> 00:26:48,118
Это еще хорошо, что у нас в Java по крайней мере пока, насколько я знаю, до сих пор нет векторных инструкций.
Там вообще ад какой-то. Плюс JIT, про который я прям лично видел.

128
00:26:48,118 --> 00:27:03,494
Некоторые люди забывают или просто предпочитают игнорировать, что он существует.
Когда говорят, пишите маленькие методы на джаве, имеют в виду совершенно не только красоту и читаемость, но еще и то, что они умеют компилироваться.

129
00:27:03,494 --> 00:27:22,710
То есть они же компилируются последовательно в джаве, то есть от маленького к большому.
Когда у тебя большой метод, в принципе... он считается джутом слишком здоровым, он не хочет его компилировать, потому что говорит,

130
00:27:22,710 --> 00:27:32,070
ну какая-то большая штука займет много memory в кэше инструкций,
такая неприятная штука, ее с собой таскать везде надо.

131
00:27:32,070 --> 00:27:42,230
То есть вы понимаете же, что в джаве есть скомпилированный код, он как-то оптимизирован,
и в нем стоят трэпы на случай, если оптимизация оказалась по профилю.

132
00:27:42,606 --> 00:27:53,726
Но профиль внезапно изменился, надо деоптимизировать, то есть в код хранится два раза с компилированием.
Если мы там говорим про несколько уровней компиляции, то он вообще кучу раз может храниться.

133
00:27:53,726 --> 00:28:07,886
И поэтому очень жадно JIT подходит к тому, чтобы, точнее скупа, к тому, чтобы компилировать методы.
Если они большие, он их не хочет компилировать. Они...

134
00:28:08,334 --> 00:28:21,974
не получит такого большого прироста. Если ты используешь такой здоровый метод, значит, ты, вероятно,
не парился по поводу того, чтобы он влез там, например, в instruction cache, и тебе все равно, с какой скоростью он там выполняется, мы не будем его компилировать.

135
00:28:21,974 --> 00:28:35,774
Ты можешь флажочек выставить jvm, она его скомпилирует, потом кто-то придет и напишет метод еще побольше.
Так каждый раз флажочек надо крутить. И это увеличивает паузу.

136
00:28:37,038 --> 00:28:43,918
потому что большой метод компликируется дольше, как ни странно.
И на деоптимизации это тоже деоптимизируешься дольше.

137
00:28:45,038 --> 00:28:55,386
Поэтому маленькие методы — это в джаве очень полезная вещь.
Ну то есть классно, получается такой чит-чит.

138
00:28:55,386 --> 00:29:02,766
То есть тебе, что бы если ты хочешь писать вот такие
высоконагруженные high frequency tradings системы, нужно что?

139
00:29:02,766 --> 00:29:12,206
Нужно свои объекты хранить в open addressing hash map'ах,
нужно разбирать объекты на массивы, если вы хотите

140
00:29:12,206 --> 00:29:21,246
их хранить, не храните их в hash map'е. Также нужно их хранить как бы последовательно
и пользоваться архитектурой, и вот это вот когда мы умеем

141
00:29:21,520 --> 00:29:34,560
ходим по элементам, ходим по данным последовательно и тогда компьютер умеет предугадывать,
к какому элементу мы дальше будем обращаться. И также смотрим на джиты.

142
00:29:34,560 --> 00:29:43,880
В принципе, вот это вот всё — это наш набор инструментов, которыми мы пользуемся.
А, и ещё каждый раз думаем в архитектуре компьютера...

143
00:29:45,774 --> 00:29:57,934
не знаю почему, но вот каждый раз думаем просто и всем и всем про нее говорим, чтобы
наверное помнее оказаться. Все ли? Все ли? Я ничего не забыл, что-то еще?

144
00:29:57,934 --> 00:30:12,454
Очень важную вещь забыл. Про архитектуру компьютера мы думаем просто потому что
надо помнить про уровни кэшей с данными и про то что есть кэш для инструкций.

145
00:30:13,070 --> 00:30:18,590
Это первое, второе, что у процессора есть branch predictor.
В принципе, можно больше не думать про архитектуру компьютера.

146
00:30:18,590 --> 00:30:30,550
Вот. Про что важно еще думать. Про что ты забыл сказать и про что я, самое главное, забыл сказать.
Человек, который не устает это повторять своим сотрудникам.

147
00:30:30,550 --> 00:30:39,950
Все, что я вам рассказал, очень хочется взять и пойти применять
и сказать, что, блин, смотри, я сейчас все перепишу, будет круто, быстро работать.

148
00:30:39,950 --> 00:30:49,274
Вот. Так не бывает. потому что все что я сказал надо каждый раз мерить
все что ты взял, ты что-то поменял, надо померить

149
00:30:49,274 --> 00:31:00,654
то есть каждое какое-то изменение, неважно архитектурное или просто косметическое
которое ты думаешь будет, ну должно повлиять на перформанс

150
00:31:00,654 --> 00:31:10,594
ты пишешь под это бенчмарк, ты пишешь бенчмарк, смотришь какой сейчас бейслайн
делаешь свои изменения и смотришь что получилось

151
00:31:11,406 --> 00:31:25,286
И это на самом деле такой ложка дёгтя в этом всём, что я такой классно рассказываю.
Смотрите, мы там делали какие-то крутые штуки, ковырялись в кишках вообще, там такая работа была.

152
00:31:26,286 --> 00:31:32,886
Ты пишешь бенчмарк, показываешь коллеге, коллега говорит, ты неправильно написал.
Ты исправляешь бенчмарк, ты относишь коллеге.

153
00:31:32,886 --> 00:31:46,178
Он говорит, да, норм вы относите третьему коллеге.
Он говорит, вы неправильно написали. вы исправляете, вроде все согласны, все должно работать, вы запускаете, смотрите, стало хуже, а вы думали, что лучше станет.

154
00:31:46,178 --> 00:32:02,178
И вы такие, блин, а почему так? Вот, вы ковыряете-ковыряете, понимаете, что все-таки неправильно написали Benchmark.
Потом вы смотрите, о, стал быстрее, так, кажется, хорошее изменение, смотрите статистическую значимость, ее нет.

155
00:32:02,178 --> 00:32:20,246
Говорите, ну, извини, выбрасываем. и люди, которые очень трепетно относятся к своему коду, вообще не могут работать в таком режиме
потому что, например, в райфе мы выбрасывали процентов 60-70, наверное, того кода, который писали

156
00:32:20,246 --> 00:32:29,446
это, во-первых, какие-то перформансные вещи, которые просто не выстрелили
ты написал, думал, блин, все же неправильно написано, сейчас я знаю, вот тут вот надо выровнять

157
00:32:29,446 --> 00:32:40,086
тут мы сейчас паддинг вставим, там еще что-то будет красиво, все
не работает, потому что, ну не знаю, по любой причине не работает.

158
00:32:40,086 --> 00:32:53,566
Ты выясняешь, что происходит, почему, оказывается, там, не знаю, у тебя паттерн данных не такой.
Дальше ты... Вторая часть работы — это написать торговые стратегии,

159
00:32:53,566 --> 00:33:05,418
которые вроде на бэк-тесте тоже прошли, все хорошо, там, кванты умные, они не просто так зарплату получают.
Все классно придумали, сказали тебе, пацаны, мы все проверили, запускаем.

160
00:33:05,418 --> 00:33:14,118
Ты запускаешь, а не работает. Не зарабатывает деньги на реальном рынке, ты выбрасываешь, все.
Ты неделю программировал, оно не работает.

161
00:33:14,118 --> 00:33:25,798
До свидания. Да, интересно. Наверное, это самое важное, чтобы делать все эти оптимизации.
Конечно же, до этого надо как-то замерить, сколько работает предыдущая версия кода

162
00:33:25,798 --> 00:33:38,554
по сравнению с новой версией оптимизированной, которую вы с любовью написали.
ты начал говорить про райв и вот по моему про про райв ты как раз рассказал что вы вот туда пришли вдвоем вдвоем вот

163
00:33:38,974 --> 00:33:51,914
своим коллегой написали там запротипировали систему такую за
за полгода и мне очень интересно поговорить про тему вот прототипирование во первых прототипирование на джаве

164
00:33:52,814 --> 00:34:08,494
этот Ну как мы тут обсуждали в подкасте, это такое. Надо прототипировать конечно же на код лени, потому что много кода придется писать.
Вот, и я хотел поговорить и про то, как написать вот быстро такую систему.

165
00:34:08,494 --> 00:34:20,734
И то, что вы же уже своим коллегой обладали как бы опытом написания предыдущей системы.
Каждый раз, когда ты приходишь в новый проект, ты как бы, ну в этот раз, в этот раз я сделаю все идеально.

166
00:34:20,734 --> 00:34:30,238
В этот раз не будет как в тот раз. И буду использовать только самые лучшие библиотеки,
которые мне не удалось втащить в предыдущий проект.

167
00:34:30,238 --> 00:34:38,158
Я сразу, как бы в самом начале, начну со самых крутых библиотек.
Не могу ты рассказать про эти полгода, как вы вообще работали,

168
00:34:38,158 --> 00:34:51,038
и какие вы, что вы сразу, как бы, не знаю, какие ошибки вы решили учесть, и что вообще такое, знаешь,
протетипировать высоконагруженную платформу за полгода.

169
00:34:51,038 --> 00:35:09,232
Ну, как это выглядит? У вас была доска, стикеры, либо вы там, не знаю, просто не спали целыми днями.
Как вообще организационно всё это... Организационно всё это так оборудовали, чтобы успеть в такие короткие дедлайны.

170
00:35:09,232 --> 00:35:24,366
Это не высоконагруженная система, это скорее сложная система с приемлемой скоростью, давай так скажу.
Это не единицы миллисекунд, но это конкретно торговля опционами.

171
00:35:24,366 --> 00:35:32,406
Полностью автоматическое, поэтому прайсинг там какое-то время занимает.
Можно сделать быстрее, если кому-то нужно.

172
00:35:32,406 --> 00:35:37,326
Нам было не нужно делать очень быстро, нам нужно было делать, чтобы работало.

173
00:35:40,846 --> 00:35:53,382
Про опыт. Здесь, наверное, важно, что я к тому моменту был уже сеньор, у меня было 8 лет опыта.
Мой коллега был вообще директор в Deutsche Bank на момент, когда переходил.

174
00:35:53,382 --> 00:36:02,982
То есть у нас было достаточно много опыта и синьорности,
плюс мы в целом достаточно сработаны и хорошо друг друга понимаем.

175
00:36:02,982 --> 00:36:18,022
Мы очень быстро нарисовали квадратики, как мы видели, как это все должно работать,
и практически на полном доверии поделили. Вот ты делаешь этот кубик, я этот кубик, вот опишки, мы срастимся.

176
00:36:18,734 --> 00:36:24,734
И действительно по этим опишкам полностью мы срастались.
Вообще не помню, чтобы у нас были какие-то проблемы, конфликты,

177
00:36:24,734 --> 00:36:28,494
или мы где-то там в итоге неправильно договорились и что-то пришлось переделывать.

178
00:36:32,942 --> 00:36:42,942
Мы просто знали, что надо сделать. В этом вся суть.
Прототипировать можно на чем хочешь, если ты знаешь, что ты хочешь сделать.

179
00:36:42,942 --> 00:36:52,942
На самом деле, я не знаю, в чем проблема писать на Jive прототипы.
Мне непонятно эта вещь, когда большая часть кода за тебя генерируется IDE.

180
00:36:53,942 --> 00:37:05,194
Это всегда впечатляло моих студентов. Я на фистефе вел курсы.
Стандартные курсы, типу учебные, которые в программу входят.

181
00:37:05,194 --> 00:37:14,994
Один из курсов это операционные системы, а второй это объектно-ориентированное программирование.
Я там показывал примеры на Java, постоянно устраивал life coding сессии,

182
00:37:14,994 --> 00:37:25,194
чтобы ребята чувствовали, что мы куда-то движемся, какие-то штуки можем сделать,
вот прям вот за час взять и сделать, и оно хопа работает и прикольно выглядит.

183
00:37:25,194 --> 00:37:37,894
И они всегда удивлялись, как так получается, что я сижу...
клавиатуры 30 секунд у нас уже там 300 строк кода написано как так потому что

184
00:37:37,894 --> 00:37:48,614
большая часть код генерируется ничего делать не надо нет проблем из джавы ну
давай тогда скажем какая часть кода вот какую часть кода ты генерировал классы

185
00:37:48,614 --> 00:37:58,398
генерируются методы генерируются переменные генерируются
а циклы генерируются и фы генерируются ну то есть нужно просто написать первую букву типа f

186
00:37:58,398 --> 00:38:08,198
а дальше там что? ctrl space, ctrl space и уже цикл готов
ты берешь нажимаешь блин, чтобы я помнил уже

187
00:38:08,198 --> 00:38:17,078
будучи менеджером ты нажимаешь одно сочетание
дальше вводишь имя потому что naming слишком сложен для компьютера

188
00:38:17,078 --> 00:38:23,542
все еще не решаемая проблема компьютерсайенса
ты поименовал класс он у тебя сгенерировался.

189
00:38:23,542 --> 00:38:31,902
Ты нажимаешь следующую клавишу, у тебя генерируется метод.
А ты опять ему вводишь просто имя. Внутри метода ты начинаешь писать какой-то код.

190
00:38:31,902 --> 00:38:44,902
Ты написал имя, нет, ты написал скорее всего вызов какого-нибудь другого метода,
нажал CTRL-ALT-V, по-моему, это программирование справа-налево называется.

191
00:38:44,902 --> 00:38:53,990
Ты что-то пишешь справа, нажимаешь CTRL-V, у тебя генерируется слева сразу нужный тип, который не надо писать.
у тебя сразу сгенерировался равно, ты просто вводишь имя.

192
00:38:54,750 --> 00:39:02,910
Дальше тебе имя в последующих строчках будет все время подсказываться.
Ты просто будешь нажимать CTRL-SHIFT-ПРОБЕЛ, оно будет влетать само.

193
00:39:03,790 --> 00:39:12,230
Дальше у тебя, например, есть коллекция, и ты пишешь название коллекции,
точка FOR, нажимаешь ТАП, у тебя сгенерировался цикл по этой коллекции.

194
00:39:13,710 --> 00:39:29,598
Ты можешь писать условия, нажать точка IF. или переменная точка if, дальше tap, и у тебя разворачивается опять сразу if,
сразу курсор становится на то место, после равно или неравно,

195
00:39:29,598 --> 00:39:49,022
и ты пишешь просто условия. Это же вообще ничего делать не надо.
У меня очень худые пальцы, смотрите. Ну нет, в этом плане да, но я думал ты сейчас скажешь что-нибудь, ничего делать не надо, я поверх класса ламбок написал, либо что-то такое.

196
00:40:08,976 --> 00:40:21,896
делал по умолчанию проблем не будет. С ламбоком проблема в том что это магия, то есть я вот
наверное одна из небольших вещей из которых согласен с сетевой валюта, что магии должно быть мало.

197
00:40:21,896 --> 00:40:36,150
Когда ты не понимаешь что происходит, ну прям как происходит, то есть ты написал аннотацию,
оно работает, почему-то как, это... Это плохо, потому что на момент разработки ты ускоряешься.

198
00:40:36,150 --> 00:40:44,710
Ты написал первый раз, там очень быстро, вообще не задумывался, все круто произошло.
А потом, когда оно сломалось, например, ты с ламбоку перешел на джава,

199
00:40:44,710 --> 00:40:52,630
на какой версии он сломался? На 17-й или на 21-й?
В общем, на какой-то версии он сломался, ты не понимаешь, что у тебя CIE падает,

200
00:40:52,630 --> 00:41:04,822
а почему, что произошло, как это починить? Совершенно непонятно. Или ты напоролся на бак в этой библиотеке и все.
То есть ты уходишь на две недели или на месяц ковырять, что за баг.

201
00:41:05,982 --> 00:41:16,102
То же самое касается Spring, то же самое касается всех библиотек, которые с Reflection работают,
в меньшей степени тех, которые с кодогенерацией.

202
00:41:16,182 --> 00:41:23,382
Ну хорошо, так, мы разобрались с кодогенерацией,
что на Jive протипировать можно. Так, это была первая часть вопроса.

203
00:41:23,462 --> 00:41:37,902
Вторая часть вопроса была про все-таки библиотеки, которые выбрали,
и ты уже так сказал, что типа... про Spring, то есть Spring'а у вас там не было в чистой в чистой Java, ну просто для некоторых чистая Java это как раз я беру Spring, он и есть чистая Java.

204
00:41:37,902 --> 00:41:54,302
Что для вас вот когда вы писали систему, что вы какие выбрали технологии вот в ту самую чистую чистую Java?
Слушай, ну нет, так как эта система не требовала каких-то маленьких задержек и так как нам...

205
00:41:54,510 --> 00:42:01,230
очень сильно хотелось чтобы были веб интерфейсы, чтобы туда можно было
интегрировать другие банковские продукты внутренние.

206
00:42:01,230 --> 00:42:16,670
А то был Sprint, конечно. Потому что с ним очень просто сделать HTTP-сервер,
сходить в базу. Для базы я всегда пропагандирую джук, потому что джук это

207
00:42:16,670 --> 00:42:31,014
очень понятная вещь. Ты пишешь просто селекты, как они есть.
Это типизированный SQL, прям у тебя в Compile Time проверяешь, что ты нормально все написал.

208
00:42:31,014 --> 00:42:45,614
При этом не требуется вот этого ORM, где всегда при малейшем джоине у тебя уже начинаются магии.
Ты такой, так, а здесь one-to-one или many-to-many, что происходит вообще? Как это?

209
00:42:45,614 --> 00:42:55,238
Блин, а как мне сделать, чтобы вот здесь вот этот объект вытянулся, а вот эти поля не вытянулись?
Потому что долго будет. Вот это всё очень быстро появляется, когда ты пользуешься ORM.

210
00:42:55,238 --> 00:43:10,278
Короче, больше сложности, чем простоты. Когда ты используешь, там, Actif Record, ну или, может, прям,
джуком писать какой-то же запрос. Ну прямую это гораздо проще работать.

211
00:43:11,150 --> 00:43:23,430
мы использовали джук. Да, кстати про джук, то есть генерилка джука это не магия, ну то есть мы
разделяем ламбок магия, джук не магии, но он же тоже там ну да он

212
00:43:23,850 --> 00:43:33,430
перегенерировать это, ты видишь этот код, ты пишешь его, но он же тоже
может там что-нибудь тебе нагенерить, что снаружи будет, я не писал как бы на джуке, но я представляю что это такой

213
00:43:33,750 --> 00:43:48,830
флюинбилдер, ты там пишешь там селект нажимаешь точку, он тебе там подсказывает что там есть в табличке и не подсказывает того чего нет в табличке.
То есть по сути у тебя такой в SQL, ты пишешь запрос и проверяешь его только тогда когда ты его вызвал.

214
00:43:48,830 --> 00:44:03,310
Ну хотя нет, тоже многие редакторы SQL показывают тебе там какие там есть поля, значения,
но как бы compile-time, вот такая вот компиляция, compile-time вот такая верификация.

215
00:44:03,310 --> 00:44:14,350
Есть только у... ну типа вот такие системы как джук где ты скомпилировал вместе со схемой базы
и точно уверен что с этой схемой с этим кодом у тебя точно вот эти все мапперы

216
00:44:14,350 --> 00:44:22,750
работают то есть джук не магия джук мы оставляем джук мы оставляем да мы и
спринг оставили когда надо можно все использовать это все не принципиальные

217
00:44:22,750 --> 00:44:34,190
какие-то позиции это про то что предпочтительно так если можешь себе
позволить сделать все на нейте то пожалуйста

218
00:44:34,318 --> 00:44:54,038
Если нет, то надо мириться с тем, что у тебя будет когда-нибудь проблема с тем, что в сперинге версии какой-нибудь появилась новая бага, которую будут чинить месяц.
Ты будешь терпеть. То же самое касается и gRPC. Мы использовали gRPC как транспорт для внутренних вещей.

219
00:44:54,038 --> 00:45:12,578
И там какой-то баг был у нас, который они чинили очень долго.
Типа месяцев пять. Мы просто ретраили. Ну то есть надо быть готовым к тому, что у тебя, если что-то используешь не свое, то ты не сможешь поправить сам.

220
00:45:13,578 --> 00:45:29,578
Не настолько я хорош, чтобы залезть в код zger.pc и поправить баг, который они не могут исправить 5 месяцев сами.
То есть получается у вас, так вот чисто по твоему описанию, из архитектуры я вижу, что у вас наверх как бы торчат вот эти http, спринговые endpoint.

221
00:45:29,774 --> 00:45:38,914
Джуком выходит в базу какую-то, которую мы еще не знаем.
И между собой эти микросервисы, они общаются через gRPC, да?

222
00:45:38,914 --> 00:45:53,278
Да. Мы там делали… Наверное, больше похожую на Event Sourcing.
Хотя даже, наверное, Event Driven системы, потому что как-то такого состояния там нет, тебе нужное.

223
00:45:57,070 --> 00:46:13,070
Ты хочешь построить реактивную архитектуру, чтобы оно работало на...
То есть тебе запушили какое-то событие, ты его прокрутил, отправил в ответ, ну или не в ответ, а куда-то дальше, еще событие, и все, успокоился, остановился.

224
00:46:13,070 --> 00:46:17,070
То есть архитектура примерно такая.

225
00:46:22,830 --> 00:46:29,790
Давай про базу. База там Postgres. Вообще мне очень понравился Postgres.
Когда я попробовал в Revolut'е, я решил, что прекрасная база данных.

226
00:46:29,790 --> 00:46:43,438
Не понимаю, почему люди используют Oracle. не понимаю почему использовали Oracle на предыдущих моих местах работы
а почему? Расскажи чем понравилось вот я как бы тоже люблю Postgres, но я как тебе сказать люблю

227
00:46:43,438 --> 00:46:50,958
знаешь, по рассказам, так все про него хорошо рассказывают
что и я такой, ну похоже, да, хорошая база

228
00:46:50,958 --> 00:46:57,518
вот чем именно для Джависта вот так вот хорошая Postgres
ну или бы не для Джависта, а чем вот вообще тебе он так понравился

229
00:46:57,518 --> 00:47:05,614
если ты можешь вспомнить свои ощущения после Oracle
Так, ну у Oracle, во-первых, свой специфический синтаксис, который я опять же в центре

230
00:47:05,614 --> 00:47:23,218
этот крекера выучил, за чем-то. Вот. А у Postgres больше похож на стандартный SQL.
У него есть супер крутая фича для веба. Это JSONB и JSONPAL.

231
00:47:23,310 --> 00:47:33,750
куда ты можешь писать запросы, которые не очень хорошо работают, но тем не менее
в принципе ты можешь кверить внутрь G-Sony, которые в базе лежат, это прям офигенно круто

232
00:47:33,750 --> 00:47:44,510
он хорошо держит нагрузку, у него перформанс очень-очень такой, прям приятный
единственная проблема, которая есть у Postgres, это что он не шардируется

233
00:47:44,510 --> 00:47:58,886
но опять же, да, то есть есть вариантики мы...
в революте партицировали, просто старые вещи выкидывали на какие-то дальние партиции, и в целом нормально, ничего, работает.

234
00:47:58,886 --> 00:48:14,146
Можно партицировать по времени, заменяет в некоторых случаях шардируем.
А, и можно сделать свой драйвер, который будет шардировать, и вот сейчас, например, у нас есть шардированный подгресс их компания.

235
00:48:14,894 --> 00:48:32,654
Плюс там есть всякие плагины, типа для таймсерии, для географии вообще там встроенный есть поиск, тип данных и графический поиск.
Это классно, то есть это супер развивающаяся система и быстро работает, и много примеров есть.

236
00:48:32,654 --> 00:48:50,086
Бери, пользуйся, красота! Давай тогда переходить уже к твоему переходу в другие бигтехи.
Если можно, насколько ты можешь рассказать про твой переход именно из разработчика в Engineering Manager.

237
00:48:50,086 --> 00:48:58,086
Когда ты начал вообще задумываться, что не пора ли мне заканчивать генерирует код,

238
00:49:05,040 --> 00:49:20,040
Steam Lead, потом Engineering Manager. Расскажи про это, то время, когда ты перешел в Engineering Manager.
Да, в какой-то момент решил, что пора переходить от Java к Ticket, просто заводить задачки в Tracker.

239
00:49:20,040 --> 00:49:32,440
Вот это работа мечты. Как это получилось? Вообще случайно, я не то, что прям сильно планировал.
Мне интересно было попробовать всегда какую-то такую позицию.

240
00:49:35,246 --> 00:49:47,526
обычно, в местах, где я работал, у нас были очень сильные синьорные команды практически везде,
состоящие из прям очень серьезных, прокачанных ребят, то есть максимум кого-то там.

241
00:49:48,086 --> 00:50:02,606
Можешь поменеджить, поментарить, это какой-нибудь стажер или там джун,
ну или может быть, в крайнем случае, в какой-нибудь виртуальной команде побыть тех, кто дом, месяцок-другой.

242
00:50:04,910 --> 00:50:25,510
Это совершенно другой экспириенс. Мне вообще было ничего не известно про позицию руководителя, как это делать, как им работать.
Абсолютно ничего не знал. Что я умел на момент, когда переходил в Engineering Manager. Я умел хорошо программировать, даже очень хорошо программировать, находясь в райще.

243
00:50:26,286 --> 00:50:40,046
Я умел в развитии бизнеса, то есть я сидел, торговал опционами в промежутках между тем, как писал код.
То есть звонят по телефону и говорят, слушай, там той робот, который ты написал, не может цену сказать.

244
00:50:40,046 --> 00:50:55,486
Говорит ты. Ты говоришь, окей, сколько там у тебя моржи?
Вот столько такой, ладно, сейчас скажу. И посчитал на бумажечке или в Excel-чике цену, говоришь, вот покупка-продажа, иди торгуй.

245
00:50:56,814 --> 00:51:09,814
А дальше нужно какие цели ставить. У меня например была цель увеличить объемы торгов валютными
опционами. Вот что ты как программист можешь для этого сделать?

246
00:51:09,814 --> 00:51:20,974
Пожалуй ничего. Ты можешь пойти договориться с sales и сказать ребят, что
там вы это, плохо работаете. Они тебе скажут сам ты плохо работаешь, пошел отсюда,

247
00:51:20,974 --> 00:51:43,510
отругают тебя и пойдешь ты дальше свои буквы нажимать.
Поэтому я ходил, например, в центр математических финансов, там осваивал вообще финансы, как торговать, как опционы, прайсить, всякие сложные вещи, что вообще бывает, чем люди занимаются.

248
00:51:43,510 --> 00:51:52,078
И, например, там был курс по структурным продуктам.
Я подсмотрел несколько интересных вариантиков,

249
00:51:52,078 --> 00:51:58,098
в чем можно сделать структурного, и пошел нашим сейлзам толкать,
говорю, давайте опцион зашьем в такую вот структуру, будет

250
00:51:58,098 --> 00:52:05,438
красиво. Они говорят, нет, это никто не купит.
Тут нужен бизнес-план. Ты рисуешь, говоришь.

251
00:52:05,438 --> 00:52:11,558
Ну смотри, мы сейчас короче вот так вот делаем, вот
столько моржи закладываем, получается, что вообще

252
00:52:11,558 --> 00:52:17,958
на 5 рублей туда-сюда можно сходить, это прям звучит
круто. Ты такой, ты захочешь купить, ну посмотри, ты же хочешь?

253
00:52:19,086 --> 00:52:26,286
Селс говорит, ну вообще да, давай попробуем.
И они идут это пичить, продавать и так далее.

254
00:52:26,286 --> 00:52:43,446
И потом есть разные корпоративные истории. Опять же, в канале у меня есть несколько историй про
то, что есть два типа селзов, те, которые работают с институциональными

255
00:52:43,446 --> 00:52:59,926
трейдерами, давай так сказать. Это банки, страховые компании, в общем, кто-то, кто что-то понимает в торговле.
И с корпоративными клиентами это какие-то просто бизнесы, которые занимаются чем-то производством, например, каким-то.

256
00:52:59,926 --> 00:53:06,526
У них есть заказы из-за рубежа, например, они хотят хеджировать свои валютные риски.
Ты можешь для них разные инструменты продавать.

257
00:53:06,526 --> 00:53:18,670
Ты идешь к этим сейлзам, к тем сейлзам, говоришь, что спрашивают, как ты думаешь, что можем еще начать делать.
выясняешь вот эти все вещи, пытаешься понять, что ты можешь запрограммировать из этого быстрее всего,

258
00:53:19,790 --> 00:53:26,070
делаешь и все, у вас как бы пошел новый бизнес по факту.
То есть вы чем-то новым начинаете торговать.

259
00:53:26,750 --> 00:53:57,254
Вот. Опять же у тебя и всегда должен быть вот этот навык пойти с кем-то договориться, что-то там как-то сделать по-новому, чтобы они там для тебя подготовили какую-то платформочку, или там узнать какие-то новости, к чему готовиться, как-то быть всё время в курсе в теме того, что происходит.
Вот этим всем я занимался, а дальше меня просто позвали... меня позвали, говорят, будете играющим тренером.

260
00:53:58,478 --> 00:54:09,278
То есть будешь программировать, будешь командой руководить, и вообще все у тебя будет круто.
Я подумал, что ну почему бы и нет, звучит прикольно.

261
00:54:09,678 --> 00:54:18,638
В команде три человека всего, сто пудов справлюсь.
Надо, надо идти. Совершенно не знал, что делать.

262
00:54:19,318 --> 00:54:32,490
В небольшой растерянности находился и думаю, блин, а как вот подступиться вообще?
С чего начать? И первое с чего начать, надо к собеседованию подготовиться, чтобы там не говорить всякую чушь,

263
00:54:32,490 --> 00:54:51,190
чтобы вообще на работу взяли. Чтобы это сделать, я написал человеку из Twitter, которого не знал даже тогда.
Он известен тем, что автор канала «Господин Архитектор» в «Телеграме» и сетево некоторых компаний.

264
00:54:53,230 --> 00:55:00,590
он вообще удивился конечно что я с такими вопросами пришел но подсказал что-то
проконсультировал успокоил меня дал мне книжку почитать очень классную

265
00:55:00,590 --> 00:55:16,750
интересную супер книжка называется fast management если вам интересно вкатиться
очень быстро то реально fast книжка такой fast track прочитал пришел на работу

266
00:55:16,750 --> 00:55:36,302
начал работать в итоге Бизнес условия, так скажем, и заменились, и у меня не очень получается играть, как у тренера.
Получается быть только тренером. И команды уже получается две, хотя была одна, и было три человека, а получилось 12.

267
00:55:37,062 --> 00:55:45,718
Но это уже такая немножко другая история, как мы к этому пришли.
Я хотел тут, может быть, пока мы не перешли совсем в менеджмент,

268
00:55:45,718 --> 00:55:53,838
еще остановиться на теме вот этом центре математических финансов,
правильно я его называю? То есть, что это такое?

269
00:55:53,838 --> 00:56:02,638
Почему ты туда пошел? Подтягивайте свои финансовые навыки.
Я к тому, что, ну то есть, тебе не хватало для работы

270
00:56:02,638 --> 00:56:24,374
понимания того, что такое опцион. не знаю, фьючерс, да, либо нет, либо что это такое, расскажи пожалуйста, чем ты там занимался в этом секретном центре финансовых технологий звучит очень действительно секретно как-то
нет, центр совсем не секретный, я постоянно рекламирую в канале, когда там наборы происходят

271
00:56:24,374 --> 00:56:35,374
или когда я там что-то помогаю ребятам делать
это бесплатный кружок, когда-то был в МГУ, мне кажется

272
00:56:36,270 --> 00:56:46,270
Просто кружок на кафедре стихостических процессов, если я правильно помню
Я не очень хорошо помню про МГУ, потому что я не из МГУ

273
00:56:49,102 --> 00:57:06,222
Этот кружок перерос в то, что ребята стали кого-то обучать, не просто друг другу рассказывать какие-то интересные вещи про финансы, а еще и обучать студентов.
И дальше они переместились в высшую школу экономики, и там последние несколько лет они совсем отсоединились от всех институтов.

274
00:57:06,862 --> 00:57:23,902
Это просто самостоятельная организация, она вообще бесплатная, туда приходят люди из индустрии.
Например, там есть ребята, которые... управляющие хедж фондами технические директора, ну не хедж фондами, давайте так,

275
00:57:24,502 --> 00:57:39,382
proprietary trading firm, наверное это более правильно.
Есть ребята, которые работают, ну или работали по крайней мере трейдерами и синиртрейдерами в том числе в больших банках российских,

276
00:57:39,982 --> 00:57:51,806
там и buy side и sell side ребята представлены, кто понимает о чем я.
Надеюсь кто-то понимает. А можно расшифровать на тех, вот на меня, которые

277
00:57:51,806 --> 00:58:01,686
не понимают о чем ты? Значит, смотри, есть два типа компаний, которые
торгуют на рынке. Это сел сайт, в котором я работал.

278
00:58:01,686 --> 00:58:06,846
И в основном бизнес этих компаний заключается в
том, чтобы...

279
00:58:10,126 --> 00:58:26,646
по сути, забирать в обмен на комиссию риск с каких-то своих клиентов.
Например, ты платишь зарплаты за рубежом, у тебя там почему-то есть в Индии центр разработки,

280
00:58:26,646 --> 00:58:34,134
и ты говоришь, у меня вот есть валютный риск.
рубля к рубии, я в рублях зарабатываю, а в рублях платить зарплаты.

281
00:58:34,134 --> 00:58:43,034
Мне надо как-то от этого риска избавиться, я не хочу этим заниматься, я не разбираюсь в финансах.
Ты говоришь, приходишь в банк и говоришь, вот давайте вы с этим разберетесь,

282
00:58:43,034 --> 00:58:55,834
я вам за это готов заплатить небольшую премию. Или большую, но в основном небольшую.
Иначе можно прийти в другой банк. Дальше банк просто забирает этот риск к себе и как-то им управляет.

283
00:58:59,758 --> 00:59:16,758
им управляет и задача банка те деньги которые ему заплатили за то чтобы банк этот риск забрал не
растратить целиком а есть байсайд ребята это те кто торгуют так называемые про прайтер и

284
00:59:16,758 --> 00:59:25,398
трейдинг стратегии это то что все обычно думают когда ты говоришь про торговые стратегии типа
сейчас куплю дешево продам дорого не знаю куплю

285
00:59:27,822 --> 00:59:35,422
Волатильность, продам волатильность, все будет круто.
Сейчас составлю красивую такую, там, не знаю, какую-то

286
00:59:35,422 --> 00:59:43,822
кондора из опционов, и он почему-то мне заработает
деньги. Вот, обычно. Обывательское представление такое, вот если вы представляете

287
00:59:43,822 --> 00:59:50,542
такого, как такую компанию такого человека, это байсайт.
То есть у них задача заработать именно на том, что они умные.

288
00:59:51,086 --> 00:59:59,886
или быстрые, ну или с кем-то договорились. Так, и чем занимаемся в этом центре?
То есть получается, что это как бы курс на добровольных

289
00:59:59,886 --> 01:00:15,774
началах. И там чему обучают-то? Обучают математическим финансам, собственно.
Я сам... В той чебанке слушал кучу всяких лекций, я еще там был по программе для студентов, у нас были дополнительные обучалки, которых не было у всех остальных.

290
01:00:16,374 --> 01:00:33,614
Плюс там был такой замечательный человек Артем Бакулин, который прочитал офигительные лекции, он их должен был открытый доступ выложить, это просто несправедливо, что их нет.
Он очень классные лекции прочитал, про какие-то базовые простые...

291
01:00:34,286 --> 01:00:44,766
валютные деривативы, про фьючерсы на очень простом уровне, про опционы, про, собственно, спот сделки. Это вот,
прочни мгновенный обмен валюты, считай, это спот.

292
01:00:46,526 --> 01:00:54,286
Много рассказывал, чем отличается одно от другого,
временная стоимость денег, и ты там начинаешь понимать, как работают кредиты, центральные банки.

293
01:00:54,806 --> 01:01:12,374
Если ты еще пройдешь курс макроэкономики сверху, то совсем все хорошо становится, такая картинка мира появляется в голове, приятная, все сразу так.
гораздо понятнее. Я даже ходил, преподавал в МГУ, у нас был курс от Deutsche Bank

294
01:01:12,374 --> 01:01:25,534
про математические финансы, я часть рассказывал, и цамины принимал, но это все немножко
было такое лоитовенькое, не очень глубокое, а в центре математических финансов

295
01:01:25,534 --> 01:01:39,334
пошли глубже, там во-первых программа меняется от года к году, поэтому не могу сказать, чему там будут учить людей,
которые захотят сейчас и придут, но по факту давайте расскажу какие-то классные

296
01:01:39,334 --> 01:01:49,594
прям вещи, которые меня зацепили, что там есть интересного. Там могут рассказать
курс про микроструктуру рынка, у меня его не было, но я читал книжки, потому что мы

297
01:01:49,594 --> 01:02:07,262
на работе использовали ее для торговли с под сделками в опять же вот этот
high frequency строительника машинка. Потом там был курс про, в принципе, деривативы, то есть, что, как работает, ну такой я бы смог прочитать, в принципе.

298
01:02:08,462 --> 01:02:27,710
Был про опционы, очень классный курс, и даже не один. Есть разные, один сейчас ведет мой друг, это Ролан Гриннис, приехал человек из Франции специально рассказывать.
все очень круто рассказывает именно математику, то есть прям стахастические

299
01:02:27,710 --> 01:02:37,270
модели, как их калибровать к рынку, как их программировать самое главное и что
интересно он еще рассказывает современный подход к тому как это

300
01:02:37,270 --> 01:02:46,270
программировать называется дифференциальное программирование, оно
отличается от расчетов на сетке, например, которые мы делали в Райфе сначала,

301
01:02:46,270 --> 01:03:01,830
потом перешли тоже на дифференциальное. Потом есть, собственно, курсы по статистике, которые приложены к финансам.
Как жирные хвосты считаются, какие бывают распределения, как моделируются хвосты,

302
01:03:01,830 --> 01:03:10,830
если это Risk Management, например, те интересны хвосты, а середины распределения очень интересны.
То есть, там есть теория экстремальных значений.

303
01:03:10,830 --> 01:03:23,550
Есть курс, очень крутой курс. Опять же, мой друг Антон...
читает как торговать опционами вот он профессиональный сеньорный трейдер уже

304
01:03:23,550 --> 01:03:34,470
по моему нет сейчас он уже вообще начальник торгового деска и он на
момент когда мы познакомились как раз работал трейдером был контрагентом

305
01:03:34,470 --> 01:03:46,830
нашим он против нас торговал и я как раз пришел в центр математических
финансов и не палился чтобы он не увидел мою фамилию очень классно

306
01:03:49,230 --> 01:03:59,310
именно как трейдеры думают. В чем вообще смысл торговли опционами?
Почему на самом деле вся торговля опционами

307
01:03:59,350 --> 01:04:09,310
сводится именно к управлению рисками? И именно в опционах очень много разных рисков.
Риски — это просто производные, к разным параметрам рыночным.

308
01:04:09,710 --> 01:04:16,630
И их много, потому что опцион — сложный продукт,
у него много производных. И первого и второго порядка.

309
01:04:17,550 --> 01:04:31,050
и на все на них смотрят. Плюс есть отдельная история про то, что это валютная опция,
и там есть свои особенности с этим связанные. Это тоже очень интересно послушать.

310
01:04:31,050 --> 01:04:43,990
Очень полезно все заполировать какой-нибудь книжечкой, например,
FX Derivative's Trading School. Отличная книжка для того, чтобы положить ее сверху на все это.

311
01:04:44,558 --> 01:04:55,298
Опять же, есть курс про то, как писать торговые стратегии.
То есть мы... Можно сесть, взять статью в интернете, написать бэктест

312
01:04:55,298 --> 01:05:05,038
и сидеть крутить, чтобы оно заработало хоть какие-то
деньги хотя бы до бэктеста. Ну кто-то ж выложил статью, значит оно когда-то работало.

313
01:05:05,038 --> 01:05:11,998
Там есть очень интересные идеи в интернете.
Прям... Ничего рабочего я так и не нашел, но очень интересно

314
01:05:11,998 --> 01:05:27,214
это все запрограммировать. говорят, что если взять достаточное количество идей и в правильных пропорциях смешать,
оно начинает зарабатывать деньги. Я такого не видел, но говорят, что оно есть.

315
01:05:27,854 --> 01:05:34,174
Понятно, слушай, очень круто звучит, звучит прям целая как...
Не то что даже набор курсов, а целая какая-то магистратура

316
01:05:34,174 --> 01:05:44,854
по такой финансовой как бы математике. Серьезные, серьезные вещи.
Это не, не какое-то, знаешь, это совершенно противоположное

317
01:05:44,854 --> 01:06:05,022
каким-то таким... В IT курсом. Интересно, я бы сам, наверное, даже посмотрел, что это такое. Спасибо, что поделился.
У меня не IT, что почему-то много вообще в образовании. Я учился, у меня диплом по хвантовой физике.

318
01:06:05,022 --> 01:06:16,966
Я зачем-то закончил курсы переводчиков. У меня есть диплом переводчика.
И вот еще центр математических финансов. Хотел дальше продолжить говорить про менеджмент.

319
01:06:16,966 --> 01:06:24,686
Расскажи, как расти в команде, ну, в том плане, не как расти в команде,
а как растить команду в том плане, что у тебя,

320
01:06:24,686 --> 01:06:31,686
ты сказал, что пришел, конечно, всего было три человека,
а осталось 12. Вот что меняется, когда в команде три человека,

321
01:06:31,686 --> 01:06:43,454
а когда 12? И если, допустим, она еще распределенная,
если, допустим, она еще, не знаю, там... фронтендеры, питанисты, джависты, плюсовики,

322
01:06:43,454 --> 01:06:55,414
то есть, я не знаю, все разные. Вот как расти, как вообще настраивать такую распределенную
команду, где из разных, из абсолютно, из программистов

323
01:06:55,414 --> 01:07:04,054
из разных областей, вот про свой какой-то опыт поделись
вообще, как тебе было? Тебе оно как-то чисто импатически сразу все получалось, либо

324
01:07:04,054 --> 01:07:15,528
ты как бы через страдания все это преодолевал?
Расскажи подробнее. У меня на самом деле нет никого кроме разработчиков в команде.

325
01:07:16,408 --> 01:07:32,648
Но что интересно, ребята, которые со мной работают, они пишут на C++, Python и GoLang.
Кстати, нет Java. Что интересно. Вопрос. Вопрос сразу же почему? Почему?

326
01:07:32,814 --> 01:07:41,934
Почему в джава-подкасте и у тебя из 12 человек никто не пишет на джаве?
Ну, хотя бы умеет, я не знаю, ладно, ладно, не пишет, хотя бы знает, может быть.

327
01:07:41,934 --> 01:07:52,574
Кстати, вот это интересный факт, что у меня очень сильная команда из джавистов,
которые программируют, на чем попало только не на джаве.

328
01:07:52,574 --> 01:08:04,674
Мой начальник, например, из одноклассников, у меня есть тоже парень из одноклассников.
Есть еще двое ребят, которые работали Java программистами, они ведущие разработчики.

329
01:08:04,674 --> 01:08:15,734
На самом деле, все самые сильные, практически все самые сильные разработчики, они так или иначе когда-то писали на Java.
Так вот получилось. А что изменилось? Сразу сразу.

330
01:08:15,734 --> 01:08:23,194
Что пошло не так? Почему тогда, если все нормально?
Сильный разработчик с Java background? Ну ладно, ладно, на Go.

331
01:08:23,194 --> 01:08:34,488
Ну то есть на Go я еще как бы, я понимаю, но...
Ну на Python, но на плюсах-то... Зачем же? Расскажи в общем, как ты растил команду.

332
01:08:34,488 --> 01:08:46,488
Так, ну я специально команду не растил. Это не то, чем ты хочешь заниматься. Давайте так.
Я слышал интересную теорию про людей, которые...

333
01:08:47,182 --> 01:08:56,842
называемый психотип-император, человек, который хочет побольше под себя накрести людей, я вообще не понимаю, зачем
это ужасно тяжело. То есть, когда у тебя трое людей, ты можешь с каждым

334
01:08:57,362 --> 01:09:09,622
поговорить, поставить ему задачку, сказать, вот посмотри, вот эта задачка, вот там по смартуре
разложить, сказать, что вот она нужна еще вот для этого, и ты еще можешь с учетом мотивации человека сказать, что вот

335
01:09:10,142 --> 01:09:20,936
ты эту задачку сделаешь, например, очень сильно поможешь всей нашей дружной команде,
она очень важная и мы на ревью ее отметим и тебе денег больше запросит

336
01:09:20,936 --> 01:09:27,596
ну и в зависимости от того, что человеку нравится или ты говоришь вот эта супер
задача, ты ее сделаешь, станешь синьорным разработчиком практически

337
01:09:27,596 --> 01:09:36,996
очень сложная задача, ты растешь. Вот, когда у тебя три человека, ты можешь ходить
ставить вот так вот задачки, упражняться в эмпатии и в том, чтобы все люди были

338
01:09:36,996 --> 01:09:46,354
счастливы, то какие классные ты им даешь задачи, ты можешь контролировать, что
происходит вот с каждой задачей, ты говоришь, мы с тобой встретимся и

339
01:09:46,734 --> 01:09:53,374
Эту задачу посмотрим, как она у тебя там, ближе к концу.
А потом еще раз посмотрим, когда получится или не получится.

340
01:09:53,374 --> 01:10:01,374
И мы с тобой вместе сядем и разберем, почему тебе не получилось.
Ты можешь чаще гораздо давать обратную связь, сказать, что

341
01:10:01,374 --> 01:10:09,774
слушай, вот ты сегодня вот так вот на общей встрече сказал,
и это могло кого-то задеть или задело кого-то.

342
01:10:09,774 --> 01:10:18,638
Что-то рассказываешь ему, как себя вести, надо учить.
Такой, ну, родитель. можешь вот этим всем заниматься. Индивидуальные планы развития составлять будешь.

343
01:10:18,638 --> 01:10:27,038
Все, давай, классно. При этом тебе еще хватает времени
попрограммировать, у тебя хватает времени позаниматься процессами. Вот у нас есть

344
01:10:27,038 --> 01:10:37,438
проектный менеджер, который в основном этим занимается. Ну, повлиять ты как-то
можешь. Скрам какой-то там свой, не знаю, комбан, что тебе нравится. У меня это

345
01:10:37,438 --> 01:10:48,974
отдельная больная тема, о чем мне нравится. И на этом на все хватает времени. Когда людей
около 10-ти становится уже тяжело, ну прям скрипеть начинаешь.

346
01:10:49,814 --> 01:10:58,534
Вот, когда 12-ть, уже вообще без шансов просто.
На 10-ти прям тяжело, на 12-ти совсем никак, и здесь нужно уже...

347
01:10:58,958 --> 01:11:10,558
совсем по-другому работать. Хотел, пока мы далеко не ушли, вот ты сказал, ставить задачу по смарту
для слушателей, тех, которых не знают. Расскажи, что значит ставить задачи по смарту.

348
01:11:10,558 --> 01:11:18,758
По уму? Типа, если перевести, типа, делай хорошо, не делай плохо?
Или как? Именно так. Задачи ставятся по уму.

349
01:11:18,758 --> 01:11:27,078
Smart – это аббревиатура, specific – то есть должна быть конкретная задача.
Я перевожу это как definition of done должен быть.

350
01:11:27,078 --> 01:11:38,630
То есть ты говоришь... Чёткий критерий, вот если будет выполнено, значит задача сделана.
Должна быть measurable, то есть измеримая, то есть чтобы твой критерий, который ты говоришь, его можно было реально померить.

351
01:11:38,630 --> 01:11:57,390
Она должна быть achievable, что это реально достичь, то есть что цель ты можешь сделать.
Не в том смысле, что мы не можем на альфа-централ полететь, а в том смысле, что у человека хватает ресурсов, у него хватает полномочий, у него хватает информации, чтобы это всё сделать.

352
01:11:57,966 --> 01:12:10,526
ты ему все дал, он ее реально может сделать, а не так, что ему придется там
пойти в центр математических финансов и изучать, как торговать опционами. Вот.

353
01:12:10,526 --> 01:12:21,206
Дальше R это релеванс, ее по-разному расшифровывают, я предпочитаю
расшифровывать ее как, зачем вообще эта задача нужна, то есть ты объясняешь человеку,

354
01:12:21,206 --> 01:12:30,486
почему мы ее делаем, какая польза вообще, откуда задача возникла.
Ну иначе мотивация делала задачу обычно... Нет, не очень понятно.

355
01:12:30,486 --> 01:12:39,406
Ну блин, принесли задачу, ну и запрограммировали, ладно.
Когда есть релеванс-часть, во-первых, мотивация понятна, ты понимаешь, я сейчас сделаю, будет круто.

356
01:12:39,726 --> 01:12:52,566
Вот мы там, не знаю, делаем новые методы оплаты, сейчас сделаем систему быстрых платежей с рекуррентами.
И люди смогут в приложении один раз кнопку нажать и потом на такси ездить все время. И не будет никаких у них...

357
01:12:53,806 --> 01:13:04,806
проблем. Все само будет списываться, когда надо. Очень круто, очень удобно.
Есть T это про время, что всегда есть Deadline, ты говоришь четко, вот когда должно быть

358
01:13:04,806 --> 01:13:17,086
готово. И здесь опять же я говорил вот там про две точки контроля, ты можешь
использовать две точки Redline и Deadline. И Redline ты делаешь, говоришь вот смотри

359
01:13:17,086 --> 01:13:22,894
тебе надо вот к этому времени и он делает к этому времени.
Потом вы приходите, смотрите, и ты говоришь

360
01:13:22,894 --> 01:13:29,654
блин, ты всё сделал не так, надо переделать
за оставшееся время. И это будет дедлайн. Вот такая штука.

361
01:13:29,654 --> 01:13:40,254
Прикольно. Ну, то есть ты вот как бы рассказал про смартфон,
то есть это целых пять пунктов. Ну, то есть чтобы просто поставить одному человеку

362
01:13:40,254 --> 01:13:46,854
такую задачу. То есть такую задачу и самому, когда ты уже поставил,
оно уже почти выполнено. Осталось-то чего?

363
01:13:46,854 --> 01:13:57,110
Надеть наушники, да просто код написать. Ну, типа думать-то особо не надо, ты замотивирован.
Все тебе нравится, все хорошо, очень хорошо проработанная задача

364
01:13:57,110 --> 01:14:05,110
Но для трех человек я еще представляю как это сделать
Конечно для двенадцати это, наверное, если только не спать и...

365
01:14:05,454 --> 01:14:15,454
Ну, мне кажется, невозможно даже. Нужны какие-то, знаешь, как...
какая-то следующая иерархия. То есть под тобой должны быть какие-то еще

366
01:14:15,454 --> 01:14:22,454
тимлиды, которым ты ставишь тимлидом задачу по смарту,
поставить задачу по смарту другим... другим ребятам.

367
01:14:22,454 --> 01:14:27,454
Что-то такое. То же 12 человек, мне кажется, даже, не знаю,
в книжках по менеджменту говорят, что, типа, да,

368
01:14:27,454 --> 01:14:37,408
что-то... что-то это многовато. Нужно... что там, две пиццы, как говорят в Амазонии,
на 8 человек, что-то такое. Как ты справлялся с 12 людьми?

369
01:14:37,408 --> 01:14:44,768
У меня сейчас два тех, леда есть, которым я потихоньку
делегирую какие-то технические вещи касательно не управления

370
01:14:44,768 --> 01:14:53,108
людьми, а управления конкретно проектами, чтобы они ставили
задачки более конкретно и удобно. А я уже буду заниматься индивидуальными планами

371
01:14:53,108 --> 01:15:04,110
развития подобными вещами и мотивацией людей.
А расскажи, кстати, про модели мотивации, и планы развития.

372
01:15:04,110 --> 01:15:12,070
Как это выглядит? Наверное, разработчикам, которые слушают наш подкаст,
им тоже интересно. Может быть, кто-то и не знал, что вообще твой менеджер

373
01:15:12,070 --> 01:15:21,470
может тебе сделать план развития. То есть, в принципе, это входит в обязанности менеджера,
и ты можешь попросить сделать свой план развития.

374
01:15:21,470 --> 01:15:35,624
Или хотя бы, чтобы твой менеджер делегировал кому-то
еще сделать для тебя план развития. что допустим я вот пришел к тебе и говорю Валерий я вот засиделся

375
01:15:35,624 --> 01:15:51,102
какого-нибудь развития что бы ты что ты мне можешь предложить я пишу на джаве
смотри уже 10 10 лет немножко, знаешь, уже подустал, не радует меня, ни смузи, ни массажи в офисе.

376
01:15:51,102 --> 01:16:04,302
Вот какие варианты есть моего развития? Ну, смотря, что ты хочешь, чем ты заниматься хочешь.
То есть, тут смотри, есть разные варианты, в зависимости от того, кто к тебе пришел.

377
01:16:05,622 --> 01:16:18,558
Есть люди, которые... Ну, чаще всего, младшие какие-то позиции, которые достаточно...
ну возьми вот эту книжку почитай, вот этот код посмотри, посмотри как вот этот человек программирует

378
01:16:18,558 --> 01:16:34,558
плюс вот у нас Яна Сильин ввел парное программирование у себя в команде
и ребята очень довольны на самом деле потому что в паре задачи решать проще если они сложные

379
01:16:34,558 --> 01:16:48,806
а у нас регулярно есть какие-то сложные задачи поэтому сели двумя головами подумали очень хорошо
это не обязательно выливается в код. Во-вторых, есть большой шаринг экспертизы, как конкретно по проекту, так и вот.

380
01:16:48,806 --> 01:17:04,446
Мне нравится, например, один из тех людей, кто очень хорошо программирует. Вот как он программирует, я также программирую.
Подход именно. И когда кто-то из младших с ним сидит, он наблюдает за тем, как работает человек или...

381
01:17:04,654 --> 01:17:09,654
что тоже часто случается, насколько я по крайней мере наблюдал, заходя на такие сессии

382
01:17:12,654 --> 01:17:26,654
Человек ищет, а техлит ему говорит, как это сделать, то есть он ему прям говорит, ну поищи использование метода вот здесь
Давай посмотрим, что там есть, так давай поисследуем, поразбираемся, попробуем понять, как этот кусок вообще работает

383
01:17:27,278 --> 01:17:34,078
именно методологические подходы, которые нигде особо не преподаются.
Такая ремесленная штука в программировании,

384
01:17:34,078 --> 01:17:43,358
которую все сами как-то приходят. Она здесь очень сильно шарится.
И это клёво. А это называется такое, наверное, наставничество.

385
01:17:43,358 --> 01:17:54,478
То есть ты прям говоришь, как делать человеку.
Есть вариант с менторингом для таких уже более продвинутых людей подходит, которые уже там, вроде, все книжки прочитали.

386
01:17:54,798 --> 01:18:11,038
Но опыта не хватает. То есть именно вот приходит и говорит человек, вот у меня такая ситуация, не было у меня такой ситуации, вот что ты посоветуешь?
Ну и ментор обычно рассказывает, ну слушай, я тебе как бы не знаю, что посоветовать, но у меня была похожая ситуация, я сделал вот так, получилось вот так.

387
01:18:11,278 --> 01:18:22,558
Ну если получилось плохо, то ты так не делай. Если получилось хорошо, можешь попробовать.
Это такой менторинг, который ты можешь провести. Есть коучинг, это там для уже более...

388
01:18:24,558 --> 01:18:37,038
таких людей, которые и опытные, и всё знают, но как-то вот знаешь, надо откуда-то вот
вытащить изнутри. Есть все ответы есть внутри у человека, но он как-то вот не

389
01:18:37,038 --> 01:18:46,718
отрефлексировал, не подумал, не знаю, закопался, знаешь, замотался, закрутился в
работе и уже сам не думает об этом. Вот ты останавливаешься, говоришь, ну подумай сам,

390
01:18:46,718 --> 01:19:02,342
давай, я тебе тут, ну, не лучше тебя понимаю. Давай вот остановись, подумай, а что тут думаешь?
Это тот самый разговор с уточкой. Но тут уточка такая умная, есть всякие техники, которыми

391
01:19:02,342 --> 01:19:13,622
я плохо владею коучинга, где там можно задавать правильные
вопросы и человек будет отвечать. Смысл коучинга, насколько я для себя его понял, в том,

392
01:19:13,622 --> 01:19:18,942
что если человеку ты задаешь вопрос и он не может на
него ответить, ты переформулируешь вопрос так, чтобы он смог

393
01:19:18,942 --> 01:19:28,974
на него ответить. Ну например, Дима, ты насколько хороший программист?
Слушай, не знаю. А по шкале от одного до десяти.

394
01:19:29,334 --> 01:19:40,174
Блин, ну слушай, надо подумать. А вот Витя.
Витя знаешь из соседнего отдела. Мне кажется, он хороший программист. Мне кажется, вот у него восьмерка.

395
01:19:40,254 --> 01:19:50,614
Твердая. Наверное, я чуть-чуть... где-то между Вити и Сережей.
Вот Сережей, который сейчас вообще в офис не пришел,

396
01:19:50,694 --> 01:20:01,968
наверное, где-то между ними. ты можешь так помогать человеку, самому себе отвечать на вопросы
но это опять же, это сколько надо времени на это стараться

397
01:20:01,968 --> 01:20:13,968
с индивидуальными планами развития, обычно люди приходят и они знают, что хотят
вот тут все понятно тогда приходит человек и говорит, я хочу заниматься вот этим

398
01:20:13,968 --> 01:20:21,906
если он приходит и говорит, слушай, я не знаю, я хочу развиваться
ты говоришь, ну окей, где ты хочешь быть через N лет?

399
01:20:22,030 --> 01:20:32,710
через три года, пять лет, не важно, зависит от того, кто к тебе пришел и что он хочет вообще, и как ты думаешь, что он может хотеть
он тебе рассказывает, вот хочу там инфраструктурным разработчиком быть

400
01:20:33,230 --> 01:20:52,350
ты думаешь, блин, ну вообще не очень такое а что значит инфраструктурный разработчик? ну вот там, не знаю, сетевойся ты к линуксу хочу переписать, ну удачи
давайте попробуем Давай попробуем найти какие-то вещи, которые тебе помогут туда приблизиться.

401
01:20:52,350 --> 01:21:02,750
Вы начинаете обсуждать, какие навыки нужны для того, чтобы прийти вот в эту точку.
Вы смотрите, какие, пытаетесь оценить, да, может субъективно, можно объективно пригласить экспертов.

402
01:21:02,750 --> 01:21:15,350
Я так не делал, но в принципе можно пригласить экспертов, которые сами смогут сказать, вот, здесь.
Этот человек там, столько по шкале от 1 до 10, здесь столько, ну какой-то там барчард нарисовать для тех, кто любит цифры.

403
01:21:15,918 --> 01:21:23,318
Можно человек спросить, сам он как думает, где у него сильнее, где у него слабее.
Добавить туда свою какую-то субъективную оценку, как ты видишь.

404
01:21:23,318 --> 01:21:33,158
И понять, какие кусочки вы хотите прокачать.
Это первое, а второе из тех, которые вы хотите, надо понять, какие вы можете прокачать в рабочих задачах.

405
01:21:33,158 --> 01:21:48,334
Вот у меня человек хотел стать разработчиком баз данных, работает в инфраструктуре.
И приходит и говорит, ну вот хочу. Ну, с одной стороны, я, конечно, расстроен, потому что я базу данных не разрабатываю.

406
01:21:48,334 --> 01:21:58,054
Разработчик хороший. Хе-хе-хе. С другой стороны, если я ему ничем не помогу, он уйдет из этой базы данных писать завтра.
А так он может у меня еще что-нибудь полезное сделать.

407
01:21:58,054 --> 01:22:05,054
И мы начинаем искать, какие задачи ему могут подойти.
Что он вообще знает про базы данных. Там выясняется, ничего не знает про базы данных, например.

408
01:22:05,054 --> 01:22:15,594
Например. И сколь запросы писать не умеем, как работают драйвера, я не знаю,
давай попробуем идти дать задачи, которые будут работать с разными базами данных.

409
01:22:15,594 --> 01:22:23,474
Посмотришь, там надо в драйверах какие-нибудь баги пофиксить,
там надо посмотреть на шардированный постгресс, как он работает,

410
01:22:23,474 --> 01:22:31,274
и что с ним будет, когда упадет один из шардов.
И вот эти задачи будут человеком мотивировать, они будут его развивать, и это интересно.

411
01:22:31,274 --> 01:22:42,446
И так можно составлять какие-то планы развития.
Что можно про это почитать? Я к тому, что ты прям очень много, прям очень структурированный, хорошо прошелся по всем этим темам.

412
01:22:42,446 --> 01:22:56,314
Как ты, где ты черпал знания про то... вот этих вот карьерных планов и как вообще развивать, развивать своих сотрудников, разработчиков.
Может быть, посоветуешь какую-то вот книгу, вот по типу фаст-менеджмента,

413
01:22:56,314 --> 01:23:10,514
либо какой-нибудь курс, может быть? У нас есть внутренние курсы достаточно в большом количестве, которые я не могу посоветовать.
Но был курс симулятор TeamLida, который ребята из подлодки пытались запустить.

414
01:23:11,534 --> 01:23:19,254
В итоге я не понял, запустили они его или нет, и в каком режиме.
Но в альфа-тесте я поучаствовал, какой-то фидбэк пооставлял,

415
01:23:19,254 --> 01:23:31,894
попроходил, там было, например, в том числе про индивидуальный план развития.
Понятно. Хорошо, спасибо. А что у вас еще? Мне очень понравилось про то, что ты насильно внедрил партнерпрограммирование.

416
01:23:31,894 --> 01:23:40,334
Все хорошо, но если в ней слово как бы насильно звучит, прямо реально как бы устрашающе,
как бы приходишь на работу, говоришь, ты теперь вот с этим.

417
01:23:41,488 --> 01:23:50,728
пишите код. Какие у вас еще есть нестандартные, может быть, вещи в процессах,
о которых ты мог бы поделиться, кроме парного

418
01:23:50,728 --> 01:24:05,608
программирования? У нас вообще очень много нестандартных вещей, на самом деле.
И это немножко... такой у меня бзик есть. Основное, что у нас вообще не так, как у

419
01:24:05,608 --> 01:24:15,226
всех, мы не пользуемся ни скрамом, ни канбаном, ну мы притворяемся скрамом
чтобы никто особо не приставал. Но на самом деле мы используем Time Flow.

420
01:24:15,226 --> 01:24:29,226
Это штука довольно свежая, по-моему, 21-го года изобретение.
Она очень похожа на... В общем, она является синтезом на самом деле двух других подходов,

421
01:24:29,226 --> 01:24:43,766
которые выросли из теории ограничений. Первый из них — это Kanban.
И второй из них — это... Hyperproductive Knowledge Base, что-то там, короче, какая-то никому не известная методология разработки,

422
01:24:43,766 --> 01:24:51,866
которая существует года там с десятого, наверное, что-то такое.
В общем, их скрестили какие-то очень умные люди, и получилось круто.

423
01:24:51,866 --> 01:25:00,566
Есть книжка, которая стоит 40 долларов. Рекомендую их потратить и прочитать.
Очень классная книжка про методологию разработки.

424
01:25:01,966 --> 01:25:14,846
Она в принципе... А как называется, подожди, как называется?
Tame flow, то есть управление потоком. Вау, звучит что-то как, знаешь, для саморазвития что-то такое.

425
01:25:14,846 --> 01:25:29,326
Путь к себе. Да, хорошо, продолжай. Смысл в том, что в этой книжке прикладывается теория ограничений,
которая есть у Элияху в его там CL2-CL3. В общем, это...

426
01:25:30,798 --> 01:25:42,098
теория ограничений, как она есть, ее надо прикладывать к... ее хочется приложить к софтвер-разработке
ну и там в принципе к интеллектуальному труду эта книжка прикладывает, не только к софту

427
01:25:42,098 --> 01:25:56,858
не очень понятно, как это сделать в общем, книжка смотрит, собственно, как это сделать, она говорит об этом
более того, там есть инструкция, как перейти из того, что у вас есть сейчас, к темпфлоу

428
01:25:56,858 --> 01:26:11,918
и может получиться... Обещается рост пропускной способности, тут ничего не могу обещать, в отличие от автора книжки.
Но по крайней мере вы начинаете делать полезные задачи, и они все подряд.

429
01:26:11,918 --> 01:26:30,046
То есть там есть много способов приоритизации, мой любимый это кто громче кричит, того задачи делаются.
Но есть и более... полезные, так скажем, методы приоритизации, которые в частности здесь зашиты прям в систему.

430
01:26:30,046 --> 01:26:41,646
В общем, ну в деталях я, наверное, не буду рассказывать это долго, но смысл очень
понятный. Мы берем задачу, и пока мы ее не сделали, мы не прекращаем ее делать. Вот это основная

431
01:26:41,646 --> 01:27:00,238
идея, которая есть внутри Tainflow. Мы не переключаемся между задачами. Второе, о чем мы делаем интересного,
нестандартного. Это всё уже по мелочи. Мы, например, отказались от стендапов, которые вот лицом к лицу.

432
01:27:00,238 --> 01:27:15,038
Мы пишем в чатик. У нас есть специальный чатик, подсмотрен у темеледа очевидности.
Что есть... что можно просто писать в чатик. Смысл тоже очень простой и обычно, обычно, когда приходишь на стендап,

433
01:27:15,038 --> 01:27:24,902
если у вас распределённая команда, то кто-нибудь ещё не проснулся, кто-нибудь уже засыпает.
Никто никого не слушает, есть вот это мучание типа

434
01:27:24,902 --> 01:27:40,434
«Ээээ, чё я там делал вчера?» Ну короче, то есть ничего не запоминается, очень не
структурированные рассказы. Очень много каких-то посторонних шумов и звуков информации левой

435
01:27:40,434 --> 01:27:49,454
И по факту я, например, после таких встреч выхожу и не понимаю, чем команда занимается
Я уже не помню к концу встречи Моя персональная проблема, наверное

436
01:27:49,454 --> 01:27:57,254
Но тем не менее Какое предлагает обычное решение?
Брать и логировать, да? То есть сидит человек и записывает за всеми

437
01:27:57,254 --> 01:28:05,154
Вот У нас в одной из команд так и делается, я не понимаю, что они делают
Вот они приносят этот лог Я по нему ничего не понимаю

438
01:28:05,358 --> 01:28:14,478
вообще. То есть если я не присутствовал на стендапе, мне принесли лог, я не понимаю, что
чего ребята делают совершенно не ясно. Ну это просто так типа записки такие-то там,

439
01:28:14,478 --> 01:28:27,598
Гриша там, не знаю, чьи дебака света, там не знаю, смотрит на предыдущий баг, ну то есть какие-то
записки одного человека, правильно? Если ты был на стендапе и есть записки, то ты вспомнишь,

440
01:28:27,598 --> 01:28:36,790
а если ты не был, то бесполезно. Плюс иногда ты не можешь присутствовать.
Болезнь, отпуск и так далее. Ты хочешь вернуться, посмотреть, что вообще было.

441
01:28:36,950 --> 01:28:45,790
Надо ли разбирать какие-то вещи. То есть ты мог пропустить какую-нибудь проблему.
И... Которую надо бы разобрать, чтобы такого больше не было.

442
01:28:46,390 --> 01:28:53,070
Либо ты хочешь понять вообще, как там продвинулись, продвинулись, что происходит.
Быстро вкатиться в контекст, что сейчас, кто чем занят.

443
01:28:53,750 --> 01:29:03,030
Э... Тут, с письменным стендапом, у тебя...
Во-первых, человек сел, он сразу структурировано написал, подумал, прежде чем сказать,

444
01:29:03,030 --> 01:29:14,470
ну потому что это текст. Он сел, подумал, написал, если что-то забыл, он потом дописал, после, уже.
И у тебя есть история. То есть ты прям идешь, смотришь, что происходит.

445
01:29:14,470 --> 01:29:25,030
Если есть вопросы, если возникают вещи, что-то надо поменять, какие-то внести характеровки,
можно созвониться с человеком, не дёргать всех, например.

446
01:29:25,030 --> 01:29:36,838
Либо можно списаться. Опять же. В чем проблема письменных стендапов?
Их никто не пишет. Ну и читают ли, понимаешь?

447
01:29:36,838 --> 01:29:44,518
Все когда-то воролись на стендап, кто не проснулся,
кто, конечно, не знает, кто уже засыпает, но они все

448
01:29:44,518 --> 01:29:55,438
присутствуют в этом, сконцентрировано, тратят время на полчаса
эти, которые есть. В письменном стендапе ты можешь там постить.

449
01:29:56,526 --> 01:30:08,526
Часто легко потерять вот это вот какой-то вайп.
Такое, что ни лайков там нет ничего, никакого там да, круто, подбадривание какого-то.

450
01:30:08,526 --> 01:30:16,526
Знаешь, такой умирающий какой-то чад, где просто там делал, делаю, делаем.
Делал, делаю, делаем. И все что-то делают, и никто...

451
01:30:16,526 --> 01:30:33,480
Ну, короче, мало, мало там эмпатии. Все-таки на таком стендапе, который лицом к лицу, там, конечно, есть кто вот так вот засыпает,
которые, как бы, которым... Ну, какая-то такая человеческая, жизненная какая-то энергия.

452
01:30:33,480 --> 01:30:44,960
Тут из чата эмоций тяжело, тяжело считать. Там приходится как-то с Майликами, Гифками,
там как-то другим способом подбады, но тоже это не всем, не всем подойдет.

453
01:30:44,960 --> 01:30:55,134
Ну, на самом деле здесь тоже кто-то читает, кто-то не читает. Мы сделали...
Специальную встречу, на которую можно прийти, молча, чтобы ты сел и написал.

454
01:30:55,134 --> 01:31:06,334
Это просто, ну как блок в календаре, но с зумом. Ты можешь прийти и поговорить.
Ну, если хочешь. Ты можешь. И когда мы сделали эту встречу, писать начали.

455
01:31:06,334 --> 01:31:16,846
Сейчас пишут. И, возможно, даже читают. Возможно.
Это не факт. но точно так же, как и не факт, что слушали, когда мы стояли

456
01:31:16,846 --> 01:31:31,126
это да, ну хорошо, прикольно, что если вот прям заблокировать время под это, то человек чувствует, как бы, ну всё, под это время заблощено
то есть я должен что-то написать за это время, нет такого, что ты не можешь сказать, я занят

457
01:31:31,126 --> 01:31:41,766
как-то занят, у всех оно, у всех одинаково, оно, вот это, как бы, митинг такой есть
интересный, интересный подход про эмпатию у нас есть два раза в неделю

458
01:31:42,062 --> 01:31:55,222
Team Coffee. Это просто встреча, где можно похавать прямо перед камерой.
Либо можно поболтать на них. Ну, они начинались с того, что я проводил там такие, знаешь, ретроспективы.

459
01:31:55,222 --> 01:32:01,582
Типа, давайте познакомимся. Вот у нас новый сотрудник появился.
Вот мы сейчас поиграем в игру. Очень интересная игра.

460
01:32:01,582 --> 01:32:14,386
Вы делитесь на комнаты по двое. Рассказываете вот вдвоем в комнате человеку что-то про себя, какое-то интро.
потом возвращаетесь все вместе и вы представляете не себя, а того с кем были в комнате.

461
01:32:14,986 --> 01:32:23,166
И это интересно. То есть что конкретно из того, что человек хотел рассказать, тебе показалось интересным,
и ты его представишь вот так. Это гораздо веселее.

462
01:32:23,826 --> 01:32:34,066
И гораздо лучше люди запоминают друг друга, появляются какие-то тут...
Темы пообсуждать как-то весело становится сразу.

463
01:32:35,566 --> 01:32:49,798
Подобных игр довольно много. И... они полезны, то есть их надо периодически проводить.
Иногда мы там какие-то лекции у нас бывают, можно что-то порассказывать про то, как работают,

464
01:32:49,798 --> 01:33:01,798
не знаю, вот там messenger, блокчейн, что кто угодно чем занимался.
У нас ребята совершенно разные бэкграунды, которые могут рассказать очень много интересных вещей.

465
01:33:01,798 --> 01:33:14,482
Можно просто поболтать. Например, один из ребят начал преподавать в институте курс по сетям.
Он такой, блин, я готовился к семинару и узнал, что про TCP очень много нового, хотите расскажу прикол.

466
01:33:15,922 --> 01:33:31,082
И там начинается. Вот это интересно, весело, это помогает держать какую-то эмоциональную связь в команде.
Это классно. Еще у нас есть забитое время под пивные зум-вечеринки, у нас их было штук...

467
01:33:32,642 --> 01:33:42,686
Может пять максимум за полгода, или за год даже.
это очень плохо работает очень сложно найти вечером время на то чтобы в зуме

468
01:33:42,686 --> 01:33:58,406
сидеть с кем-то пиво пить. Что еще из необычного у нас есть интересная практика не всем
рекомендую но интересные это написание технических дизайнов и дизайн ревью

469
01:33:58,406 --> 01:34:10,926
как это пропагандировали мне коллеги из мне что типа можем заменить
код-ревью на дизайн-ревью, потому что какая разница, что там в коде?

470
01:34:10,926 --> 01:34:19,766
У тебя тесты написаны, у тебя там линтеры все проверят, тебе главное решение,
правильно оно или нет, ну то есть идеологически человек правильно делает или нет,

471
01:34:19,766 --> 01:34:39,374
ты же не будешь баги искать глазами, тесты же должны искать, мы же все пишем тесты, да? Вот.
Генирируем, генирируем тесты, сейчас больше уже не пишем, как бы копируем, спрашиваем чат GPT там, ну да, авторство мое писал не я.

472
01:34:39,374 --> 01:34:54,194
Вот, и ты пишешь дизайн документ, буквально там, не знаю, одно-два предложения на день разработки, что ты собираешься делать.
Показываешь человеку, какому-то в команде другому он смотрит.

473
01:34:54,414 --> 01:35:04,394
оценивает насколько ты вообще в адеквате и то что ты предлагаешь, оно будет работать
ищет какие-то корнеркейсы, ну то есть по факту делает ревью, но слов

474
01:35:04,954 --> 01:35:17,694
дальше когда приходит, мы не можем отказаться от pull request, потому что у нас там аудиторное
регуляторное требование, что должно быть for ice review, то есть четыре человека должны, четыре глаза должны посмотреть обязательно на код

475
01:35:18,114 --> 01:35:30,318
один закомитил, второй запровил, как минимум
Но это сильно упрощает код-ревью. Я вот захожу, там поменено 20 файлов. В какой тыкать? Вообще не понятно.

476
01:35:30,318 --> 01:35:43,078
Я иду в тикет, смотрю, там написано какой-то дизайн документ, я его прочитал, понял, что хотел сделать автор, что он собирался сделать в принципе.
И я понимаю примерно, в какой файл мне надо тыкнуть и откуда начать разматывать вот это всё.

477
01:35:43,726 --> 01:35:53,446
И я понимаю код, который написан, что он там хотел вообще сделать гораздо легче.
То есть чисто с когнитивной точки зрения становится гораздо проще.

478
01:35:53,446 --> 01:36:08,326
И код-ревью делается прям в разы быстрее. А в чем плюс? Это, опять же, сделано с точки зрения теории ограничений.
Из-за того, что у нас есть проблемы, с тем, что очень много задач на входе,

479
01:36:08,326 --> 01:36:16,466
и не так много ресурсов, чтобы их все сделать.
мы не можем себе позволить плохое качество. То есть что может произойти?

480
01:36:16,826 --> 01:36:29,246
Мы взяли задачку, ее разработчик начал делать, он ее делал неделю, показывает на код-ревью, а там вообще неправильно.
То есть он идеологически неправильно начал делать. Надо было делать не там, или надо было делать не так, или надо было делать не то.

481
01:36:32,046 --> 01:36:40,726
И надо все заново переделывать. Это не пять дней, но три.
Все равно много. Ты теряешь время, пропускная способность падает, ты меньше задачи делаешь.

482
01:36:41,454 --> 01:36:49,454
Мы немножечко в начало процесса отодвигаем.
Мы смотрим, что у нас есть какой-то дизайн.

483
01:36:49,454 --> 01:36:56,454
Мы можем сразу сказать, что он плохой, это не будет работать.
И кода там, ну может написано, не знаю, один день человек код писал.

484
01:36:56,454 --> 01:37:05,894
Или вообще не успел начать писать код, посмотрели его дизайн,
ну, обсудили, переделали. Или бы человек пока писал, он что-то задумался, да, что-то понял.

485
01:37:05,894 --> 01:37:16,838
И решил, что, блин, надо пойти спросить. Пошел, спросил, сделал нормально сразу.
То есть мы повышаем именно качество за счет внедрения еще одного этапа в разработку

486
01:37:16,838 --> 01:37:29,198
То есть как бы у тебя pipeline для одного тикета стал длиннее, потому что надо буквы печатать руками и думать головой
Но по факту в среднем пропускная способность вырастает

487
01:37:29,198 --> 01:37:38,798
Это интересная практика Как сайд-эффект у тебя есть документация в какой-то веке
Ты смотришь в код, думаешь, что за фигня, зачем вообще так сделали?

488
01:37:39,406 --> 01:37:48,326
Ну, бред, вообще написано бред. Ты делаешь Blame, идешь...
Там тикет. К комитту пролинкован, ты идешь в тикет, там написано, почему сделали так.

489
01:37:48,326 --> 01:38:00,046
Такой, ааа, блин, ну спасибо вообще, очень круто.
Да, круто, крутая идея. Мне кажется, что вот дизайн Doki, вот эти дизайн-ревью, они часто используются,

490
01:38:00,046 --> 01:38:11,814
но до достаточно больших компаний. Все-таки, типа, в средних компаниях и малых, там есть вот это вот какое-то, знаешь...
Чувство, племенное чувство, когда мы знания передаем друг другу как бы каким-то, не знаю,

491
01:38:11,814 --> 01:38:23,374
вербальным, каким-то способом, вербально в курилке друг другу там передаем и всё такое.
Всё-таки дизайн-рью – это более какой-то цивилизованный способ передавать знания и более что ли.

492
01:38:23,374 --> 01:38:31,094
Ну то есть, если люди уходят, дизайн-доки остаются, остаются больше просто артефактов
от того, как принимались решения, что было у людей в голове.

493
01:38:31,342 --> 01:38:39,342
Ну, наверное, только большие компании тоже себе могут такое позволить,
или видят выгоду от этого, потому что, опять же, количество людей не все так скелится.

494
01:38:39,342 --> 01:38:49,822
Человек не может созвониться со всеми, быстро позвонить «алло, ты зачем там вот это вот написал?»
Ну, то есть, просто такая не скелится сама практика.

495
01:38:49,822 --> 01:39:00,038
Я понимаю, что мы уже перешагнули за полтора часа, но мне все еще пару вопросов осталось.
Хотелось узнать, а где вы эти дизайнеры? Есть ли какой-то формат этого дизайн-ревью?

496
01:39:00,038 --> 01:39:13,798
То есть что там? Обычный трехзвенный вступление, середина, кульминация, конец?
Или что? Проблема? Какие варианты решения? Дизайн-диаграммы? В конце к чему пришли?

497
01:39:13,798 --> 01:39:24,198
И что там? Расскажи про структуру. Как выглядит дизайн-дог обычный?
Слушай, есть несколько вещей. У нас есть, во-первых, два вида тикетов.

498
01:39:25,198 --> 01:39:33,898
Один это проектные тикеты, когда пришел бизнес и говорит, вот надо сделать, чтобы работало.
И чтоб хорошо еще было, и быстро. Вот, и я вам ничего не скажу больше.

499
01:39:33,898 --> 01:39:45,898
Вот, с этими тикетами отдельный flow работы, к ним отдельные требования, что там нужно посмотреть, оценить.
Это по факту надо разобраться, найти все необходимые...

500
01:39:45,898 --> 01:39:52,898
Ну, удостовериться, что у тебя есть вся информация, что если это интеграция с внешним партнером,
у тебя есть доступы, у тебя есть документация CAPI.

501
01:39:53,166 --> 01:40:01,726
у тебя есть люди, контакты какие-то, с кем поговорить, обсудить, задать вопросы.
Ты понимаешь, зачем это делается, ты можешь оценить косты.

502
01:40:01,726 --> 01:40:11,206
То есть я люблю метрику cost of delay, нормированной, неважно, короче,
cost of delay, сколько мы потеряем денег, если не сделаем, или если отложим эту задачу.

503
01:40:11,206 --> 01:40:22,726
Так получается, что мы в первую очередь берем те задачи, которые спасают нам больше всего денег.
Соответственно, ты вот эти все вещи оцениваешь в этом тикете.

504
01:40:23,182 --> 01:40:32,302
понимаешь как-то собираешь и можешь раздробить на задачи на разработку
с задачами на разработку там уже дизайн документы пишутся внутри

505
01:40:34,862 --> 01:40:45,522
у нас есть опять же специальная форма как заводить задачи на разработку
чтобы там был definition of done и какие-то ну минимальные вещи опять же да

506
01:40:46,202 --> 01:40:54,734
зачем мы это делаем? почему? как? какие сроки?
то есть какие-то есть форма Там прям вопросы заданы.

507
01:40:54,734 --> 01:41:06,134
Что будет, если мы не сделаем? Что будет, если мы не сделаем в срок?
Потом там... Как поймем, что сделано? То есть надо задать вопросы, на которые человек сможет ответить нормально,

508
01:41:06,134 --> 01:41:12,334
а не так, что «дефинированно, в данту, чё это вообще такое?»
Вопросы задаёшь, люди заполняют форму. Вот.

509
01:41:12,334 --> 01:41:21,534
Уже этого очень много. То есть это уже какое-то там хорошее обоснование.
Вот это первая часть, которая должна быть в тикете, которую мы берём в работу.

510
01:41:22,318 --> 01:41:29,258
Там немного текста, там бывает типа по одной строчки на каждый пункт,
и да, иногда там по два слова на каждый пункт, и все понятно.

511
01:41:29,258 --> 01:41:39,598
Это не должно превращаться в бюрократию радиобюрократии.
Есть дальше для дизайн документа целую у нас вики страницу человек написал.

512
01:41:39,598 --> 01:41:50,918
Сотрудник пришел, говорит, я вот делал такую штуку в прошлой компании, сейчас расскажу.
И сделал большую страницу, там написано, что, зачем, почему, как писать.

513
01:41:51,470 --> 01:42:07,190
Вот, но по факту не все настолько дисциплинированы, чтобы писать прям по пунктам.
Там есть контекст, типа, почему вообще задача возникла, почему я ее решаю, куда я посмотрел.

514
01:42:07,190 --> 01:42:19,590
Ну, короче, какие-то вещи, которые тебе позволят потом вернуться к задаче и быстро вспомнить, что ты вообще делал.
И почему как, ну, короче, восстановить контекст по факту. Это контекст. Его не все пишут.

515
01:42:22,734 --> 01:42:33,014
Следующий пункт это как я буду делать. Это обязательная вещь, у них как нельзя не написать, иначе что ревьюить?
Что ты будешь делать? И третья вещь тоже очень важная, это как ты будешь тестировать.

516
01:42:33,014 --> 01:42:49,214
Потому что не очень понятно иногда, как протестировать. Ты что-то сейчас поменяешь, а как мы поймем, что ты сделал так, как есть там наверху написано?
Но как ты будешь проверять, что то, как там написано, оно выполняется? Это вообще далеко не всегда понятно.

517
01:42:49,214 --> 01:42:58,378
То есть ты можешь написать, конечно, unit-тесты.
Но не на всё. Иногда бывают какие-то интеграции, и ты такой, блин, ну вообще не очень понятно.

518
01:42:58,378 --> 01:43:07,478
Может быть, у тебя есть тестовое приложение, ты пойдёшь в тестовом приложении проверять.
Может, у тебя есть какие-то тестовые стенды, на котором можно скриптами что-то подёргать, и надо там проверить.

519
01:43:07,478 --> 01:43:19,178
А может быть, неприятная ситуация, когда ты можешь проверить только в продакшене.
Есть такие компании целые, которые вот говорят, ну нет, у нас тестовые среды, ребят.

520
01:43:19,178 --> 01:43:30,042
Вперёд, щас, щас. в продакшене там нормально давай ну и ты уже говоришь ну будем в продакшене
тестировать вот вот такие сценарии пройдемся и вы просто по списку

521
01:43:30,042 --> 01:43:42,542
проверяете отлично отлично спасибо что поделился ну что пока я предлагаю перейти
к рубрике не популярное мнение мы уже тут достаточно много много всего

522
01:43:42,542 --> 01:43:52,174
наговорили если у тебя нет нечего чего-то добавить может быть я что-то
забыл у тебя спросить может Ты что-то хотел рассказать дополнительно?

523
01:43:53,174 --> 01:44:04,374
Что я хотел дополнительно рассказать? Что я постоянно хайрю.
Пожалуйста, приходите ко мне. Если вы вдруг внезапно собеседуете в большую красную компанию,

524
01:44:04,694 --> 01:44:16,574
то скажите, что вы хотите в технологическую платформу, в группу платежей.
Тогда переходим к непопулярному мнению. А, сейчас, секунду.

525
01:44:17,294 --> 01:44:33,254
Частая смена компании, я вспомню. Нет, это было из того выпуска, который уже выложено. У меня есть еще выпус, который не выложено, поэтому тебе не удастся подготовиться к этому не популярному мнению.
Придется экспериментировать. Смотри, не популярное мнение такое.

526
01:44:33,254 --> 01:44:45,254
ГИТ очень плохой инструмент. Так, мнение действительно не популярное.
Тут прям не могу не согласиться с автором.

527
01:44:45,254 --> 01:44:57,406
Смотря в каком контексте. Я уж не знаю, почему человек решил, что гид плохой инструмент.
В плане того, как устроена система команд в гите, ну это реально ад.

528
01:44:57,966 --> 01:45:10,926
Вы же все пользовались, вы знаете, кому я рассказываю.
Это просто... В принципе, любая консольная тула, написанная не Робом Пайком и компанией,

529
01:45:12,406 --> 01:45:20,766
она выглядит как гид. К сожалению, с этим приходится жить.
можете попробовать в Google Cloud консоли что-нибудь написать.

530
01:45:20,766 --> 01:45:35,666
Это похуже упражнение, чем Git. Вот, но как система контроля версии, Git очень удобный,
потому что... Ну, децентрализации мало кто пользуется, я согласен, но...

531
01:45:35,666 --> 01:45:50,294
Там есть мерш, там есть rebase, и ты всегда можешь устроить срач в команде, как правильно,
Это же... Что еще нужно от системы контроля версий?

532
01:45:50,294 --> 01:45:59,974
Ну да, нужен Appianated инструмент, который вроде и хорош, но он Appianated,
чтобы мы могли все о нем как бы зарубаться на кухне о том, хороший он или плохой.

533
01:45:59,974 --> 01:46:10,814
Ну здорово, значит у нас действительно неопопулярное мнение у предыдущего гостя.
Теперь, Валерий, время для твоего неопопулярного мнения.

534
01:46:12,334 --> 01:46:24,014
Смотри, я тогда сейчас спрашиваю твоё непопулярное мнение, а потом ты как-то попробуй сформулировать его одним предложением, чтобы я мог где-то его там запостить, а потом
просто расшифруй, можно уже подлиннее расшифровать твоё непопулярное мнение.

535
01:46:24,614 --> 01:46:38,614
Итак, поехали непопулярное мнение от Валерия Овчинникова.
Почти всегда то, что сотрудник имеет возможность бездельничать на работе и бездельничает, это полезно для компании.

536
01:46:41,326 --> 01:46:51,326
По-моему, это очень непопулярное мнение. Да, неплохо.
Да, действительно. А теперь объясни, поясни, поясни почему.

537
01:46:51,326 --> 01:46:59,326
Объяснение здесь такое. Это, кстати, очень сильно противоречит
тому, по крайней мере, как я воспринимал книжки по управлению

538
01:46:59,326 --> 01:47:06,258
людьми. Там всегда говорят, что ты должен, как руководитель,
заниматься тем, что у тебя люди не простаивают.

539
01:47:06,606 --> 01:47:18,286
Ну, возможно, их стоит читать просто по-другому, и это я как-то вот со своей капиталистической колокольни
хотел всех заставить работать, давай деньги делай.

540
01:47:20,286 --> 01:47:39,230
Возможно, имелось в виду, что надо просто дать людям возможность работать бесперебойно.
Почему же не стоит стараться... использовать, ну то есть 100% утилизацию человека делать, чтобы он вот, короче, 8 часов фигачивал непрерывно.

541
01:47:39,870 --> 01:47:47,630
Это связано очень сильно с теорией ограничений и
с методологией, которую я у себя внедряю, это темпфлоу.

542
01:47:48,190 --> 01:48:01,990
Смысл следующий, у тебя внутри компании для каждой производственной цепочки, там от фронтэнда или мобильного приложения до
какого-то самого глубокого бэкэнда есть команды разработки, которые что-то будут делать.

543
01:48:03,118 --> 01:48:16,258
Любая фича, практически, она вот построена из цепочки каких-то команд, которые будут заниматься разработкой.
Всегда найдется в этой цепочке команда, ну просто математически хотя бы одна,

544
01:48:16,258 --> 01:48:24,158
ну даже на самом деле всегда только одна найдется,
которая загружена сильнее всех. Вот, что ты хочешь делая, вот она будет затыком.

545
01:48:24,758 --> 01:48:31,358
Вот с какой скоростью она будет делать задачу,
вот с той задачей давай так, да, вот эти вот все.

546
01:48:32,142 --> 01:48:45,142
которые заказы приходят, все что через нее проходит ограничено вот этой командой, ее пропускной способностью.
Она больше переварить в принципе не может. Ты можешь вот здесь вот, до этой команды, что после нее,

547
01:48:45,142 --> 01:48:56,142
наделать сколько угодно вообще работы кода, написать там миллионы строк, но фича в продакшн не выйдет,
пока команда вот эта вот являющаяся ограничением.

548
01:48:57,326 --> 01:49:18,926
она свою работу не сделает, она не может ее сделать, ну, просто физически больше, чем она делает в нормальном режиме.
Соответственно, когда люди вот здесь, вот в этих командах, начинают генерировать работу на вход вот этой команде ограничений,

549
01:49:18,926 --> 01:49:28,926
они делают вред, потому что они копят вот здесь вот работу недоделанную.
которая не будет фичу, и она не будет приносить деньги, но она будет тратить деньги. За счет чего?

550
01:49:29,526 --> 01:49:40,086
Ты написал код, который не работает, чем он плох.
Он тестами покрыт, скорее всего. Вот, когда вы вернетесь к тому, что этот код нужно будет запускать, интегрировать и так далее,

551
01:49:41,606 --> 01:49:49,766
даже несмотря на то, что он покрыт тестами, все равно, скорее всего, придется его переделывать.
Либо условия изменились, либо интеграция пошла не так, как ты планировал.

552
01:49:49,766 --> 01:49:56,214
Что-то обязательно меняется, надо переделывать.
Второе, фича может вообще никогда не понадобиться и надо будет выбрасывать.

553
01:49:56,214 --> 01:50:08,774
Третье, у тебя код усложнился, при этом пользы никакой от этого не появилось.
В четвертых, кодовая база выросла. У тебя увеличились косты и время на компиляцию, сборку, деплоймент и так далее.

554
01:50:08,774 --> 01:50:21,974
Пятое, у тебя из-за комплексити кода вырастает вероятность ошибки и падения.
То есть ты как-то там, вот в этом вот неиспользуемом коде, вокруг него что-то там прокладываешь следующие фичи.

555
01:50:22,574 --> 01:50:29,574
Как какой-то там код делаешь аккуратненько.
Но ты случайно задеваешь там какую-нибудь небольшую

556
01:50:29,574 --> 01:50:42,694
кочечку и она взрывается. Ты просто положил свой проект кодом, который не используется. Это абсолютный вред.
Я уже не говорю о том, что люди поработали, ты им зарплату заплатил, а это никаких денег тебе не принесло.

557
01:50:43,814 --> 01:50:59,246
Гораздо полезнее будет, если человек пойдет кофе попьет вместо этого.
Но есть еще более полезные занятия. которым очень любят заниматься разработчики, которым почему-то часто, по их уверениям по крайней мере, бизнес не дает.

558
01:50:59,246 --> 01:51:15,246
Это технический долг, это мониторинги, это все задачи, которые не требуют участия вот этой вот критической команды.
То есть все, что ты можешь делать внутри своей команды замкнутым, настроить C.I., оптимизировать время компиляции,

559
01:51:20,462 --> 01:51:41,962
в то самое время, которое у тебя появляется из-за того, что мощность твоей команды избыточна по отношению к всей системе в целом?
Да, спасибо, мне кажется это очень интересно, то есть я стал больше понимать о этом непопулярном мнении, да, спасибо.

560
01:51:42,062 --> 01:51:51,182
И мне кажется, что оно понравится как разработчикам, так и инжинированным менеджерам.
Эти ничего не делают, а те не страдают от того, что эти ничего...

561
01:51:51,182 --> 01:52:00,078
То есть отличная идея. Не было у нас такого прямо...
не было похоже у непопулярного меня ну что же Валерия, спасибо, это были замечательные

562
01:52:00,078 --> 01:52:08,078
два часа и я думаю, что можно было бы конечно еще
даже наскрести где-то еще на час, у меня остались вопросы

563
01:52:08,078 --> 01:52:16,078
к тебе, я еще не сильно тебя мучил по поводу твоего канала, в котором
ты напишешь, и не сильно углублялся в какие-то тоже там

564
01:52:16,078 --> 01:52:31,326
вопросы там по платежным всяким системам я знаю, что у тебя есть видео тоже на целые
2,5 часа на ютюбе, которое можно если вы еще как бы еще хотите послушать Валерия, просто на YouTube найдите

565
01:52:31,326 --> 01:52:38,686
Валерия Овчинникова и по-моему в канале Вастрика или на YouTube канале
Вастрика, там было видео про платежные сервисы, очень-очень интересное

566
01:52:38,686 --> 01:52:48,446
интересное видео, узнаете что такое корреспондентский счет в банке и как он
как он используется, вот я послушал, мне очень-очень понравилось

567
01:52:48,446 --> 01:53:08,134
спасибо тебе большое Валерии и Здорово, что ты пришел. Приходи еще, с удовольствием запишем еще выпуск.
Спасибо, что позвал. Ну что же, слушайте, это был подкаст Java Swag. Подписывайтесь на нас, на подкаст в Apple подкастах, Google подкастах, Spotify.

568
01:53:08,134 --> 01:53:15,494
Ставьте там лайки, пишите, пишите ревью. Вот и до встречи в следующем выпуске. Всем пока.


:
С вами был Игорь Негода. Мне одна группника сказала, говорит, смотри, есть курсы в институте, там короли джавы ведут. Тогда говорят, пишите маленькие методы на джаве. Имеют в виду совершенно не только красоту, но еще и то, что они умеют компилироваться. Все самые сильные разработчики, они так или иначе. Когда-то писали на Джаве. Всем привет! В эфире подкаст Jawa Swag. С вами я, ведущий Дим Валыхин. Сегодня у нас в гостях Валерий Ховчинников, инжинирик-менеджер в одной из бихтех-компаний в России. Валерий, привет! С Валерием мы долгое время пытались созвониться и записать подкаст. Я подписан на его телеграм-канал с классным названием «Квант Валерин». Очень-очень классное название. Так что слушайте, сразу реклама, зайдите в телеграм-канал, посмотрите. Очень интересный контент для тех, кто увлекается всякими платежными системами и таким вот технологичными точки зрения. еще не знает Валер, не могу ты немного представиться, рассказать о себе и вообще как ты относишься к javi и у нас же все-таки java podcast, вот как бы подвяжи историю о себе плавно к тому как ты пришел в java. Так, хорошо, я программировал на java лет 10, может быть даже немножко больше и в основном это все было связано с финансовым каким-то стэком. Давай я расскажу немножко, наверное, как я вкатился. Не очень интересная история, но полезная. У меня очень долго не получалось начать делать какие-то серьезные вещи. То есть в школе мне нравилось программирование на паскале, вот эти задачки порешать. Это все было понятно и легко. Но как только я хотел сделать что-то, чем можно попользоваться, что-то для себя, автоматизировать, вообще не получалось просто от слова никак. И в институте я пробовал. Сначала у нас были курсы по C, кое-как их там сдавал, по Assembler'у, там тоже с грехом пополам. И какие-то C++ были у людей в параллели, но у нас совершенно это всё... Короче, это была слабая такая сторона у меня. Мне одна группник сказала, говорит, смотри, есть курсы в институте, там короли Java ведут. Прям так и сказала, я на всю жизнь запомнил. Это компания Netcracker организовывала тогда. учебные центры в разных университетах. Я насколько знаю, в этом году, или даже в прошлом уже их закрыли временно, потому что они остановили наим. Но супер курсы были тогда. Я вписался, пошел. Очень интересная история опять есть у меня в канале, как я на эти курсы попал, учитывая то, что тесты я написал очень плохо по программированию. Но в итоге очень сильно много времени тратил на то, чтобы этим позаниматься. Мне это всё зашло, прям супер было классно, интересно. Я ходил в тряс своего друга, программиста, который тогда в Google работал, говорю, ну учи, помоги, я не могу домашку сделать. И как-то-как-то, потихонечку, за полгода я достаточно хорошо прокачал себе джаву, чтобы даже попасть в такой предотбор тех, кого позвали на работу через полгода обучения на портайм. Ну и более того, я прошел собеседование, начал работать в Меткрекере порттаймером. Даже несколько команд предложили мне выбрать, к кому пойти. Это опять же очень повезло. Я попал в ту команду, которая была географически близко, мне надо было ездить никуда. Вот, там Enterprise Java, EGB, даже по-моему EGB 1.0 были где-то там в ядре. Очень всё сложно, ничего не понятно, какие-то веб-лоджики, всё очень сложно. Но, тем не менее, была и такая ванильная джава немножечко. Её у нас специальный отдел System Performance проталкивал. Там как раз известный в джавом мире Володя Ситников работал. И они этим отделом очень часто закидывали какие-то квизы. интересные. Ээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээ Очень интересно было смотреть вот эти вещи, учиться у людей, которые настолько глубоко знали язык. Но у меня конкретно задачки были не самые интересные. Я пытался там внутри как-то сротироваться, но не пошло. И позвали в Deutsche Bank, а тогда это прямо рассказывали, что такое место, это прям там такие космолеты строят, ребята. Там high frequency tracing, там все очень круто. Я пошел туда, за этим всем очень крутым, и немножечко мне удалось все-таки потрогать. Я там делал систему для risk management, которая показывала... В общем, для сделок по обмену валютой система показывала риски, считала их real-time, и у нас были довольно жесткие SLA по там какие-то... 99% у нас был меньше 5 мс. Вот так вот я могу сказать от входа до выхода. Очень много занимало времени GC-тюнинг. Там мой темлит, с которым мы вдвоем это все писали, научил меня всяким очень грязным хаком в джаве, как писать garbage free код, как делать low latency приложение на джаве. Это тоже был офигительный опыт. Наши приложения, которые мы там делали, они, во-первых, внутри Deutsche Bank были очень популярны. Опять же, просто мне повезло, что мы переделывали, это Reengineering проекты были, мы переделывали старые продукты, которые всех бесили. Мы делали круто. И поэтому бизнес был очень доволен, нам там давали какую-то... международную внутри дачи банковскую награду как самый инновационно крутой проект какую-то стекляшку подарили даже начальнику вот но интересно что этот проект был настолько популярен что трейдеры которые уходили в другие банки захотели там такое же и очень много было запросов снаружи на ребят, которые работали в моей команде, на то, чтобы их перевести в другой банк, чтобы сделали так же хорошо. Вот. Классный, интересный опыт. Потом я решил попробовать в стартапе поработать и сходил в Revolut. Мне не очень зашло. После всех вот этих трейдинговых штук с простой на математикой, с какими-то перформанс-оптимизациями, я пришел, а там веб-сервисы писать. Просто какие-то их вот эти ручки. Перекладывание джейсонов. Я загрустил. поделал там сервис по расчету кредитного рейтинга. Это меня немножко повеселило, потому что там тоже что-то пришлось посчитать. Но опять же, он очень быстро сделался и кончился. И я решил, что надо пойти снова торговать. Так попал в райфайзенбанк. И в райфайзенбанке мы уже настоящим хардкором занимались. Опять же со своим бывшим начальником из Deutsche Bank мы вдвоем делали опционный трейдинг полностью с нуля. Ничего не было в райфайзе, не было. Нас позвали, точнее позвали начальника, а он позвал меня делать уже торговлю валютными опционами. На самом деле получилось... Очень быстро. Мы прототипировали на коленке за полгода полностью автоматическую торговлю. И ребята из индустрии общались с разными трейдерами. С других банков они в шоке вообще. Как это можно за полгода? Просто они не видели, что там в исходниках. Так бы все было понятно. Вот, в Rive тоже позанимались немножко какими-то оптимизациями, подписал и лог-фри алгоритмы, и какой-то low latency-код, и потрогал немножко C++, слава богу немножко, моих навыков очень мало хватает. И в какой-то момент решил, что это надо. в область с меньшим психологическим напряжением переходить. Поэтому перешел вот в БигТех, где обещали смузи, массаж и сырки на кофепоинтах. Так и стал инжиниринг-менеджером. Да, слушай, ты прям очень много покрыла времени, которое... Ну, своей карьерой. Я бы хотел немножко углубиться в тему, то, что ты сказал, что самым как бы основным штуком и самым основным каким-то там... Как писать GC-free код и всяким таким именно на чистый джави, вот ты научился в дойче. А есть какие-то примеры того, как писать на джави, типа... Вот на чистой джаве так чтобы было быстро. То есть какие вы там техники использовали? Что обычно было? Это были какие-то просто, знаешь, добавь кэш? Либо что там, не знаю, замени базу? Либо это было все-таки в джаве какие-то там, не знаю, своеобразный стиль написания кода? Нет, базы нет, если ты хочешь LoL At&C, то надо все в InMemory делать. Эмм... На самом деле... Есть несколько трюков, но стоит думать скорее об архитектуре компьютера, когда ты что-то делаешь. Скорее уже в эту глубину дальше я пошел в райфе, а первые трюки в Dohich as well. Ну, трюки на самом деле спорные, если уж на то пошло. Тем не менее, на момент какой-то 2013-2014 год работали прекрасно. например, вместо того чтобы использовать объекты и хранить их в... в какой-то структуре данных, например, в мапе, ты хранишь несколько массивов, и в этих массивах поля объектов. Соответственно, у тебя нет такого, что по индексу 1 лежит какой-то нужный тебе объект. Ты по индексу 1 в каждом из массивов можешь получить нужное тебе поле этого объекта, а самого объекта не существует. Таким образом, ты экономишь на локациях и иногда будешь Collection. Второй прием оттуда, который я помню, это пулы объектов. С ними сложность в том, что зачастую low-latency архитектуры это такие конвейеры, и поэтому тебе нужно... часто передавать объекты из одного потока в другой. Соответственно, тебе нужно какой-то безопасный пул держать, чтобы объекты в него можно было возвращать. Но при этом ты не хочешь, чтобы это была, например, блокирующая очередь. Потому что в какой-то... один момент ты можешь на этой очереди встать, и всё станет плохо, и тебе не продолжать работать. Вот. Собственно, конвертная архитектура — это must-have. Это тоже трюк, который я там освоил. что многие называют Disruptor, потому что видимо придумали те же ребята, что придумали Disruptor. Возможно придумал Мартин Томпсон, я не знаю кто это придумал, но смысл в том, что ты не хочешь многопоточную программу в принципе. Однопоточный код всегда работает быстрее, но есть но. Для того, конкретно от входа до выхода ты можешь разбить обработку своего сообщения на несколько этапов, каждый этап обрабатывать в отдельном потоке, то есть ты в одном потоке обработал, передал в следующий и он занимается каким-то этапом, таким образом у тебя есть просто несколько циклов например по количеству ядер и ты, ну например, пришло сообщение, ты в первом потоке его десерилизовал, положил в какую-то очередь, второй поток из очереди забрал, посчитал по этому объекту, положил посчитанное в третьей очереди. Третий поток из очереди забрал, сериализовал и отправил по сети, например. Ну я лутрирую, в целом примерно так и выглядит. Какие еще будут интересные приемы? Ну а не получается тут так, что вот смотри, ну вот сейчас какой-нибудь разработчик... слушать нас, ну подожди, вот у меня восьмиядерный компьютер, и что у меня? 8 всего потоков и 8 очередей, а если мне менеджер говорит, слушай, там нужно 9 какой-то вставить фильтр, ну все, надо переезжать на компьютер, в котором есть больше чем 8 ядер, ну как это происходит или такой проблемы нет, мы просто как бы, суть в том, что мы пиним к какому-то, то есть поток должен занять какое-то там, какое-то ядро и только им овладеть, а дальше нас не волнуют, что будет происходить. Очень сильно зависит, то есть что ты хочешь. Всегда зависит от конкретной задачи. В случае, когда там какой-то hard, real-time люди пытаются делать, конечно, В случае, когда у тебя на самом деле commodity, просто говоришь low latency, у всех разные немножко понятия, что такое low, у кого-то там 1 мс это уже много, а у кого-то low это 100 мс. Я сейчас провожу архитектурные секции собеседования. дизайн и там low latency это совсем не то low latency, которое я знаю. Ну кстати вот если проводишь это прям интервью, то спрашиваешь вот сколько low latency по времени, вот какие тебе ответы дают, вот сколько примерно разработчики считают для них low. Так как я сейчас не собеседую на Low Latency Java разработку, то есть это не трейдинг какой-то, а это скорее какие-то высоко нагруженные системы, то тут ребята говорят, что 100 мс это Low Latency, 200 – нормально, до 500 человек практически не замечается. значит норм. Ну то есть это совершенно, ну то есть это все еще low latency, ну такой вебный low latency. Low latency для браузера просто потому что человек как бы не успевает увидеть, что там не знаю, обновились данные там типа на странице. А другой low latency это когда типа там вот как ты говоришь 99% там 5 мс. Это как бы в 100 раз поменьше, либо даже не знаю сколько, в тысячу раз поменьше. Все так да, и именно торговли тебе важны в зависимости от того чем конкретно ты занимаешься тебе важны уже около там миллисекундные задержки и это все еще не микро секунды когда мы там делаем какой-то именно hft где ты хочешь там десятки микро секунд в плохом случае здесь когда у тебя есть возможность миллисекундами заниматься ты можешь себе даже context switch позволить Микросекунд 50 наверное, займёт. Это нормально, типа, ещё хватит, можешь несколько раз успеть. Можешь даже локи использовать и всё хорошо. В таких случаях ты можешь на одно ядро запинить какие-нибудь ио-потоки, потому что, какая разница, они всё равно в CPU эти сидят всё время. Ты отправил и всё, это свидание. А на какие-то вычисления уже используют потоки, которые запинены на ядра. Ну и эти ядра можно через C группус, например, изолировать и никому не отдавать. Можно другими способами пинить то. А вот такой вопрос. Давай попробуем как-то мысленно разделить для нашего слушателя, у которого перед глазами нет ничего перед глазами, а просто в наушниках наш подкаст. Смотри, есть две системы. Два типа системы, допустим. Есть та система, которая отвечает за меньше, чем 500 мс. И в этой системе можем использовать хэш-мапы, можем использовать какие-то локи, можем использовать все, что есть в джайве. хорошо. А есть системы, в которых нужно, которые должны отвечать за меньше, чем 5 мс. И там уже нельзя использовать, например, какие-то штуки из Java, например, как ты сказал, локи, либо, например, нужно использовать вместо hashmaps какие-то свои трюки, своеобразные библиотеки использовать из Java. Какие... Что еще нельзя использовать в таких вот именно low-light-системах? Что там? Только примитивы и массивы, собственно, и все. И как бы... И джава ли вообще это? Ведь у нас же... У джавы же она и славится тем, что там вокруг этих библиотек, вокруг всего этого полно. Ну, то есть всяких этих классных штучек, которые можно использовать. То есть получается, мы на джаве пишем только вот, как бы, используя самые базовые какие-то конструкции. Темы хороша от Java, что очень большая широкая экосистема. То есть у тебя есть, например, вместо стандартных очередей, которые написаны, у тебя есть специальные очереди, например, для single producer, single consumer, которые будут использовать другую семантику, другую memory-модель. То есть они возьмут release-acquire, и все будет у тебя работать пошустрее, если твой процессор хорош. Правильной архитектуры. Давайте так. чтобы не углубляться. Потом ты можешь взять... Это вообще первая вещь, с которой знакомишься, когда начинаешь программировать что-то финансовое. Это хэштаблицы с открытой адресацией. Раньше это были какие-то Goldman Sachs collections, Colobog collections и прочее. Там прям throw в collections, по-моему. Я помню, что с Т начинались все названия коллекций. Как это назывались, не помню. Почему, опять же, да, с открытой адресацией используются здесь Последовательные чтения в памяти работают быстрее, чем как в стандартной хэшмапе коллизии разрешаются цепочками, это будут хопы по памяти. То есть у тебя каждый раз это какой-то прыжок за новым объектом. С открытой адресацией этих прыжков меньше, и соответственно она работает шустрее. Если ты еще и примитивы берешь, то опять же коллекция с примитивами всегда есть в... всех этих библиотеках, то это еще меньше прыжков по памяти, потому что тебе не нужно прыгать в объект, ты можешь прямо in place лежать, складывать в массив примитивы, все будет работать шустрее. Есть Chronicle, они дают как платные, так и бесплатные библиотеки, и у них есть вообще невероятно крутые штуки, типа, раньше как мы делали, мы в unsafe, строчки. складывали в массивчике, чтобы не делать объекты, и ты вот это перекладываешь это конечно прикольно, но у Chronicle еще круче есть, они короткие строчки, научились мапить в long и у тебя просто long везде, над которым есть обертка, которая у которой нет объекта анастатической, и это круто работает, то есть ты можешь при этом читать, писать нормально, видеть, что, какие данные передаются Влоги пишешь нормально, по сети можешь отправлять нормально. При этом у тебя внутри приложения используется не массив байта, просто лонг. Это очень круто. И таких библиотек очень много, и они гораздо лучше, чем те решения, которые мы же делали внутри у себя. Слушай, классно, я вот такого как-то даже слышу про то, что упаковывают всякие там во всякие там интеджеры, массивы интеджеров, чтобы это было как-то по плотнее, вот, но вот то, что прям строчки упаковывают прямо в лонге, такого, такого я не слышал. Кстати, для слушателей вот еще одно я вспомнил, у нас когда-то, у нас уже больше 50 выпусков и в первые десятки выпусков у Роман Левентов. И он, по-моему, если не ошибаюсь фамилии, по-моему, он как раз рассказывал про Хроникал-мапы, про библиотеку Калабоке. Очень, по-моему, интересный выпуск получился. Отличная отсылка, наверное, от 50 плюс выпуска туда, в прошлое, когда был еще такой… Подказ мы записывали через… через Skype наушники с микрофоном. Вот, и да, я знаю этот набор библиотек, я, к сожалению, с этим не работал, только какие-то примеры запускал. Знаешь, ты там вкачаешь «Кроникл МАП», загружаешь, кладешь сюда объекты, вычитываешь, такой «Вау!» Короче, читается. Да, да, да. Ну, то есть буквально, буквально как какие-то такие, просто по деле дел. Вот, интересно то, что все эти библиотеки выросли как раз из того, из какого-то high frequency trading, то есть для нужд определенной конкретной области, где тебе как бы все что... тебе все, что там, всякие объекты, строки, тебе все нужно упаковывать в какие-то примитивные типы, потому что примитивные типы, они вот как-то с гарбич-коллектором работают получше. То есть получается, это вот такая вот идея, что мы все берем и пытаемся как можно сильнее ужать, чтобы избавиться от гарбич-коллектора. То есть только гарбич-коллектор наш враг, либо есть еще что-то, что мешает нам писать вот такие как бы быстрые системы. коллектор не такой уж большой враг потому что ты же хочешь не только без мусора писать ты еще хочешь писать с хорошим паттерном по памяти потом о чем я и говорил смысл в чем что прыгать по памяти очень плохо ты не хочешь этого делать и хочешь читать последовательно это такой базовый такой санитарный, пожалуйста не прыгайте по памяти, ходите последовательно. Все очень аккуратненько будет кэшироваться в процессоре, все будет хорошо лежать в кэшах, быстро подтягиваться повыше, все будет очень быстро считаться и работать. Это супер круто, потому что память сильно медленнее, чем процессор, и нужно работать над ней. Но... Что еще можно делать? Чем наджава? Мне кажется, практически никто не занимается уже. Можно смотреть и на branchpredicter, и на джит. То есть, что они там делают. Ну, например, очень люблю вопрос на собеседование. Сейчас заспылил кусочки небольшие. Про сортировки маленьких массивов. Какие сортировки? Выбирать для того, чтобы сортировать коротенькие массивы. И на практике чаще всего выигрывает insertion sort сортировка вставками Хотя она квадратичная во-первых, во-вторых, но довольно примитивная Не очень понятно почему, если маленький массив, он влезает в кэш и как бы у тебя кэра есть квиксорт или insertion sort Суть в том, что у сортировки вставками очень мало бранча миспредикшенов Потому что она все время в одну сторону двигает элементы И у нее на один элемент один промах Или даже меньше, средний Поэтому она довольно шустро работает. И таких вещей довольно много, которые встречаются. Это еще хорошо, что у нас в Java по крайней мере пока, насколько я знаю, до сих пор нет векторных инструкций. Там вообще ад какой-то. Плюс JIT, про который я прям лично видел. Некоторые люди забывают или просто предпочитают игнорировать, что он существует. Когда говорят, пишите маленькие методы на джаве, имеют в виду совершенно не только красоту и читаемость, но еще и то, что они умеют компилироваться. То есть они же компилируются последовательно в джаве, то есть от маленького к большому. Когда у тебя большой метод, в принципе... он считается джутом слишком здоровым, он не хочет его компилировать, потому что говорит, ну какая-то большая штука займет много memory в кэше инструкций, такая неприятная штука, ее с собой таскать везде надо. То есть вы понимаете же, что в джаве есть скомпилированный код, он как-то оптимизирован, и в нем стоят трэпы на случай, если оптимизация оказалась по профилю. Но профиль внезапно изменился, надо деоптимизировать, то есть в код хранится два раза с компилированием. Если мы там говорим про несколько уровней компиляции, то он вообще кучу раз может храниться. И поэтому очень жадно JIT подходит к тому, чтобы, точнее скупа, к тому, чтобы компилировать методы. Если они большие, он их не хочет компилировать. Они... не получит такого большого прироста. Если ты используешь такой здоровый метод, значит, ты, вероятно, не парился по поводу того, чтобы он влез там, например, в instruction cache, и тебе все равно, с какой скоростью он там выполняется, мы не будем его компилировать. Ты можешь флажочек выставить jvm, она его скомпилирует, потом кто-то придет и напишет метод еще побольше. Так каждый раз флажочек надо крутить. И это увеличивает паузу. потому что большой метод компликируется дольше, как ни странно. И на деоптимизации это тоже деоптимизируешься дольше. Поэтому маленькие методы — это в джаве очень полезная вещь. Ну то есть классно, получается такой чит-чит. То есть тебе, что бы если ты хочешь писать вот такие высоконагруженные high frequency tradings системы, нужно что? Нужно свои объекты хранить в open addressing hash map'ах, нужно разбирать объекты на массивы, если вы хотите их хранить, не храните их в hash map'е. Также нужно их хранить как бы последовательно и пользоваться архитектурой, и вот это вот когда мы умеем ходим по элементам, ходим по данным последовательно и тогда компьютер умеет предугадывать, к какому элементу мы дальше будем обращаться. И также смотрим на джиты. В принципе, вот это вот всё — это наш набор инструментов, которыми мы пользуемся. А, и ещё каждый раз думаем в архитектуре компьютера... не знаю почему, но вот каждый раз думаем просто и всем и всем про нее говорим, чтобы наверное помнее оказаться. Все ли? Все ли? Я ничего не забыл, что-то еще? Очень важную вещь забыл. Про архитектуру компьютера мы думаем просто потому что надо помнить про уровни кэшей с данными и про то что есть кэш для инструкций. Это первое, второе, что у процессора есть branch predictor. В принципе, можно больше не думать про архитектуру компьютера. Вот. Про что важно еще думать. Про что ты забыл сказать и про что я, самое главное, забыл сказать. Человек, который не устает это повторять своим сотрудникам. Все, что я вам рассказал, очень хочется взять и пойти применять и сказать, что, блин, смотри, я сейчас все перепишу, будет круто, быстро работать. Вот. Так не бывает. потому что все что я сказал надо каждый раз мерить все что ты взял, ты что-то поменял, надо померить то есть каждое какое-то изменение, неважно архитектурное или просто косметическое которое ты думаешь будет, ну должно повлиять на перформанс ты пишешь под это бенчмарк, ты пишешь бенчмарк, смотришь какой сейчас бейслайн делаешь свои изменения и смотришь что получилось И это на самом деле такой ложка дёгтя в этом всём, что я такой классно рассказываю. Смотрите, мы там делали какие-то крутые штуки, ковырялись в кишках вообще, там такая работа была. Ты пишешь бенчмарк, показываешь коллеге, коллега говорит, ты неправильно написал. Ты исправляешь бенчмарк, ты относишь коллеге. Он говорит, да, норм вы относите третьему коллеге. Он говорит, вы неправильно написали. вы исправляете, вроде все согласны, все должно работать, вы запускаете, смотрите, стало хуже, а вы думали, что лучше станет. И вы такие, блин, а почему так? Вот, вы ковыряете-ковыряете, понимаете, что все-таки неправильно написали Benchmark. Потом вы смотрите, о, стал быстрее, так, кажется, хорошее изменение, смотрите статистическую значимость, ее нет. Говорите, ну, извини, выбрасываем. и люди, которые очень трепетно относятся к своему коду, вообще не могут работать в таком режиме потому что, например, в райфе мы выбрасывали процентов 60-70, наверное, того кода, который писали это, во-первых, какие-то перформансные вещи, которые просто не выстрелили ты написал, думал, блин, все же неправильно написано, сейчас я знаю, вот тут вот надо выровнять тут мы сейчас паддинг вставим, там еще что-то будет красиво, все не работает, потому что, ну не знаю, по любой причине не работает. Ты выясняешь, что происходит, почему, оказывается, там, не знаю, у тебя паттерн данных не такой. Дальше ты... Вторая часть работы — это написать торговые стратегии, которые вроде на бэк-тесте тоже прошли, все хорошо, там, кванты умные, они не просто так зарплату получают. Все классно придумали, сказали тебе, пацаны, мы все проверили, запускаем. Ты запускаешь, а не работает. Не зарабатывает деньги на реальном рынке, ты выбрасываешь, все. Ты неделю программировал, оно не работает. До свидания. Да, интересно. Наверное, это самое важное, чтобы делать все эти оптимизации. Конечно же, до этого надо как-то замерить, сколько работает предыдущая версия кода по сравнению с новой версией оптимизированной, которую вы с любовью написали. ты начал говорить про райв и вот по моему про про райв ты как раз рассказал что вы вот туда пришли вдвоем вдвоем вот своим коллегой написали там запротипировали систему такую за за полгода и мне очень интересно поговорить про тему вот прототипирование во первых прототипирование на джаве этот Ну как мы тут обсуждали в подкасте, это такое. Надо прототипировать конечно же на код лени, потому что много кода придется писать. Вот, и я хотел поговорить и про то, как написать вот быстро такую систему. И то, что вы же уже своим коллегой обладали как бы опытом написания предыдущей системы. Каждый раз, когда ты приходишь в новый проект, ты как бы, ну в этот раз, в этот раз я сделаю все идеально. В этот раз не будет как в тот раз. И буду использовать только самые лучшие библиотеки, которые мне не удалось втащить в предыдущий проект. Я сразу, как бы в самом начале, начну со самых крутых библиотек. Не могу ты рассказать про эти полгода, как вы вообще работали, и какие вы, что вы сразу, как бы, не знаю, какие ошибки вы решили учесть, и что вообще такое, знаешь, протетипировать высоконагруженную платформу за полгода. Ну, как это выглядит? У вас была доска, стикеры, либо вы там, не знаю, просто не спали целыми днями. Как вообще организационно всё это... Организационно всё это так оборудовали, чтобы успеть в такие короткие дедлайны. Это не высоконагруженная система, это скорее сложная система с приемлемой скоростью, давай так скажу. Это не единицы миллисекунд, но это конкретно торговля опционами. Полностью автоматическое, поэтому прайсинг там какое-то время занимает. Можно сделать быстрее, если кому-то нужно. Нам было не нужно делать очень быстро, нам нужно было делать, чтобы работало. Про опыт. Здесь, наверное, важно, что я к тому моменту был уже сеньор, у меня было 8 лет опыта. Мой коллега был вообще директор в Deutsche Bank на момент, когда переходил. То есть у нас было достаточно много опыта и синьорности, плюс мы в целом достаточно сработаны и хорошо друг друга понимаем. Мы очень быстро нарисовали квадратики, как мы видели, как это все должно работать, и практически на полном доверии поделили. Вот ты делаешь этот кубик, я этот кубик, вот опишки, мы срастимся. И действительно по этим опишкам полностью мы срастались. Вообще не помню, чтобы у нас были какие-то проблемы, конфликты, или мы где-то там в итоге неправильно договорились и что-то пришлось переделывать. Мы просто знали, что надо сделать. В этом вся суть. Прототипировать можно на чем хочешь, если ты знаешь, что ты хочешь сделать. На самом деле, я не знаю, в чем проблема писать на Jive прототипы. Мне непонятно эта вещь, когда большая часть кода за тебя генерируется IDE. Это всегда впечатляло моих студентов. Я на фистефе вел курсы. Стандартные курсы, типу учебные, которые в программу входят. Один из курсов это операционные системы, а второй это объектно-ориентированное программирование. Я там показывал примеры на Java, постоянно устраивал life coding сессии, чтобы ребята чувствовали, что мы куда-то движемся, какие-то штуки можем сделать, вот прям вот за час взять и сделать, и оно хопа работает и прикольно выглядит. И они всегда удивлялись, как так получается, что я сижу... клавиатуры 30 секунд у нас уже там 300 строк кода написано как так потому что большая часть код генерируется ничего делать не надо нет проблем из джавы ну давай тогда скажем какая часть кода вот какую часть кода ты генерировал классы генерируются методы генерируются переменные генерируются а циклы генерируются и фы генерируются ну то есть нужно просто написать первую букву типа f а дальше там что? ctrl space, ctrl space и уже цикл готов ты берешь нажимаешь блин, чтобы я помнил уже будучи менеджером ты нажимаешь одно сочетание дальше вводишь имя потому что naming слишком сложен для компьютера все еще не решаемая проблема компьютерсайенса ты поименовал класс он у тебя сгенерировался. Ты нажимаешь следующую клавишу, у тебя генерируется метод. А ты опять ему вводишь просто имя. Внутри метода ты начинаешь писать какой-то код. Ты написал имя, нет, ты написал скорее всего вызов какого-нибудь другого метода, нажал CTRL-ALT-V, по-моему, это программирование справа-налево называется. Ты что-то пишешь справа, нажимаешь CTRL-V, у тебя генерируется слева сразу нужный тип, который не надо писать. у тебя сразу сгенерировался равно, ты просто вводишь имя. Дальше тебе имя в последующих строчках будет все время подсказываться. Ты просто будешь нажимать CTRL-SHIFT-ПРОБЕЛ, оно будет влетать само. Дальше у тебя, например, есть коллекция, и ты пишешь название коллекции, точка FOR, нажимаешь ТАП, у тебя сгенерировался цикл по этой коллекции. Ты можешь писать условия, нажать точка IF. или переменная точка if, дальше tap, и у тебя разворачивается опять сразу if, сразу курсор становится на то место, после равно или неравно, и ты пишешь просто условия. Это же вообще ничего делать не надо. У меня очень худые пальцы, смотрите. Ну нет, в этом плане да, но я думал ты сейчас скажешь что-нибудь, ничего делать не надо, я поверх класса ламбок написал, либо что-то такое. делал по умолчанию проблем не будет. С ламбоком проблема в том что это магия, то есть я вот наверное одна из небольших вещей из которых согласен с сетевой валюта, что магии должно быть мало. Когда ты не понимаешь что происходит, ну прям как происходит, то есть ты написал аннотацию, оно работает, почему-то как, это... Это плохо, потому что на момент разработки ты ускоряешься. Ты написал первый раз, там очень быстро, вообще не задумывался, все круто произошло. А потом, когда оно сломалось, например, ты с ламбоку перешел на джава, на какой версии он сломался? На 17-й или на 21-й? В общем, на какой-то версии он сломался, ты не понимаешь, что у тебя CIE падает, а почему, что произошло, как это починить? Совершенно непонятно. Или ты напоролся на бак в этой библиотеке и все. То есть ты уходишь на две недели или на месяц ковырять, что за баг. То же самое касается Spring, то же самое касается всех библиотек, которые с Reflection работают, в меньшей степени тех, которые с кодогенерацией. Ну хорошо, так, мы разобрались с кодогенерацией, что на Jive протипировать можно. Так, это была первая часть вопроса. Вторая часть вопроса была про все-таки библиотеки, которые выбрали, и ты уже так сказал, что типа... про Spring, то есть Spring'а у вас там не было в чистой в чистой Java, ну просто для некоторых чистая Java это как раз я беру Spring, он и есть чистая Java. Что для вас вот когда вы писали систему, что вы какие выбрали технологии вот в ту самую чистую чистую Java? Слушай, ну нет, так как эта система не требовала каких-то маленьких задержек и так как нам... очень сильно хотелось чтобы были веб интерфейсы, чтобы туда можно было интегрировать другие банковские продукты внутренние. А то был Sprint, конечно. Потому что с ним очень просто сделать HTTP-сервер, сходить в базу. Для базы я всегда пропагандирую джук, потому что джук это очень понятная вещь. Ты пишешь просто селекты, как они есть. Это типизированный SQL, прям у тебя в Compile Time проверяешь, что ты нормально все написал. При этом не требуется вот этого ORM, где всегда при малейшем джоине у тебя уже начинаются магии. Ты такой, так, а здесь one-to-one или many-to-many, что происходит вообще? Как это? Блин, а как мне сделать, чтобы вот здесь вот этот объект вытянулся, а вот эти поля не вытянулись? Потому что долго будет. Вот это всё очень быстро появляется, когда ты пользуешься ORM. Короче, больше сложности, чем простоты. Когда ты используешь, там, Actif Record, ну или, может, прям, джуком писать какой-то же запрос. Ну прямую это гораздо проще работать. мы использовали джук. Да, кстати про джук, то есть генерилка джука это не магия, ну то есть мы разделяем ламбок магия, джук не магии, но он же тоже там ну да он перегенерировать это, ты видишь этот код, ты пишешь его, но он же тоже может там что-нибудь тебе нагенерить, что снаружи будет, я не писал как бы на джуке, но я представляю что это такой флюинбилдер, ты там пишешь там селект нажимаешь точку, он тебе там подсказывает что там есть в табличке и не подсказывает того чего нет в табличке. То есть по сути у тебя такой в SQL, ты пишешь запрос и проверяешь его только тогда когда ты его вызвал. Ну хотя нет, тоже многие редакторы SQL показывают тебе там какие там есть поля, значения, но как бы compile-time, вот такая вот компиляция, compile-time вот такая верификация. Есть только у... ну типа вот такие системы как джук где ты скомпилировал вместе со схемой базы и точно уверен что с этой схемой с этим кодом у тебя точно вот эти все мапперы работают то есть джук не магия джук мы оставляем джук мы оставляем да мы и спринг оставили когда надо можно все использовать это все не принципиальные какие-то позиции это про то что предпочтительно так если можешь себе позволить сделать все на нейте то пожалуйста Если нет, то надо мириться с тем, что у тебя будет когда-нибудь проблема с тем, что в сперинге версии какой-нибудь появилась новая бага, которую будут чинить месяц. Ты будешь терпеть. То же самое касается и gRPC. Мы использовали gRPC как транспорт для внутренних вещей. И там какой-то баг был у нас, который они чинили очень долго. Типа месяцев пять. Мы просто ретраили. Ну то есть надо быть готовым к тому, что у тебя, если что-то используешь не свое, то ты не сможешь поправить сам. Не настолько я хорош, чтобы залезть в код zger.pc и поправить баг, который они не могут исправить 5 месяцев сами. То есть получается у вас, так вот чисто по твоему описанию, из архитектуры я вижу, что у вас наверх как бы торчат вот эти http, спринговые endpoint. Джуком выходит в базу какую-то, которую мы еще не знаем. И между собой эти микросервисы, они общаются через gRPC, да? Да. Мы там делали… Наверное, больше похожую на Event Sourcing. Хотя даже, наверное, Event Driven системы, потому что как-то такого состояния там нет, тебе нужное. Ты хочешь построить реактивную архитектуру, чтобы оно работало на... То есть тебе запушили какое-то событие, ты его прокрутил, отправил в ответ, ну или не в ответ, а куда-то дальше, еще событие, и все, успокоился, остановился. То есть архитектура примерно такая. Давай про базу. База там Postgres. Вообще мне очень понравился Postgres. Когда я попробовал в Revolut'е, я решил, что прекрасная база данных. Не понимаю, почему люди используют Oracle. не понимаю почему использовали Oracle на предыдущих моих местах работы а почему? Расскажи чем понравилось вот я как бы тоже люблю Postgres, но я как тебе сказать люблю знаешь, по рассказам, так все про него хорошо рассказывают что и я такой, ну похоже, да, хорошая база вот чем именно для Джависта вот так вот хорошая Postgres ну или бы не для Джависта, а чем вот вообще тебе он так понравился если ты можешь вспомнить свои ощущения после Oracle Так, ну у Oracle, во-первых, свой специфический синтаксис, который я опять же в центре этот крекера выучил, за чем-то. Вот. А у Postgres больше похож на стандартный SQL. У него есть супер крутая фича для веба. Это JSONB и JSONPAL. куда ты можешь писать запросы, которые не очень хорошо работают, но тем не менее в принципе ты можешь кверить внутрь G-Sony, которые в базе лежат, это прям офигенно круто он хорошо держит нагрузку, у него перформанс очень-очень такой, прям приятный единственная проблема, которая есть у Postgres, это что он не шардируется но опять же, да, то есть есть вариантики мы... в революте партицировали, просто старые вещи выкидывали на какие-то дальние партиции, и в целом нормально, ничего, работает. Можно партицировать по времени, заменяет в некоторых случаях шардируем. А, и можно сделать свой драйвер, который будет шардировать, и вот сейчас, например, у нас есть шардированный подгресс их компания. Плюс там есть всякие плагины, типа для таймсерии, для географии вообще там встроенный есть поиск, тип данных и графический поиск. Это классно, то есть это супер развивающаяся система и быстро работает, и много примеров есть. Бери, пользуйся, красота! Давай тогда переходить уже к твоему переходу в другие бигтехи. Если можно, насколько ты можешь рассказать про твой переход именно из разработчика в Engineering Manager. Когда ты начал вообще задумываться, что не пора ли мне заканчивать генерирует код, Steam Lead, потом Engineering Manager. Расскажи про это, то время, когда ты перешел в Engineering Manager. Да, в какой-то момент решил, что пора переходить от Java к Ticket, просто заводить задачки в Tracker. Вот это работа мечты. Как это получилось? Вообще случайно, я не то, что прям сильно планировал. Мне интересно было попробовать всегда какую-то такую позицию. обычно, в местах, где я работал, у нас были очень сильные синьорные команды практически везде, состоящие из прям очень серьезных, прокачанных ребят, то есть максимум кого-то там. Можешь поменеджить, поментарить, это какой-нибудь стажер или там джун, ну или может быть, в крайнем случае, в какой-нибудь виртуальной команде побыть тех, кто дом, месяцок-другой. Это совершенно другой экспириенс. Мне вообще было ничего не известно про позицию руководителя, как это делать, как им работать. Абсолютно ничего не знал. Что я умел на момент, когда переходил в Engineering Manager. Я умел хорошо программировать, даже очень хорошо программировать, находясь в райще. Я умел в развитии бизнеса, то есть я сидел, торговал опционами в промежутках между тем, как писал код. То есть звонят по телефону и говорят, слушай, там той робот, который ты написал, не может цену сказать. Говорит ты. Ты говоришь, окей, сколько там у тебя моржи? Вот столько такой, ладно, сейчас скажу. И посчитал на бумажечке или в Excel-чике цену, говоришь, вот покупка-продажа, иди торгуй. А дальше нужно какие цели ставить. У меня например была цель увеличить объемы торгов валютными опционами. Вот что ты как программист можешь для этого сделать? Пожалуй ничего. Ты можешь пойти договориться с sales и сказать ребят, что там вы это, плохо работаете. Они тебе скажут сам ты плохо работаешь, пошел отсюда, отругают тебя и пойдешь ты дальше свои буквы нажимать. Поэтому я ходил, например, в центр математических финансов, там осваивал вообще финансы, как торговать, как опционы, прайсить, всякие сложные вещи, что вообще бывает, чем люди занимаются. И, например, там был курс по структурным продуктам. Я подсмотрел несколько интересных вариантиков, в чем можно сделать структурного, и пошел нашим сейлзам толкать, говорю, давайте опцион зашьем в такую вот структуру, будет красиво. Они говорят, нет, это никто не купит. Тут нужен бизнес-план. Ты рисуешь, говоришь. Ну смотри, мы сейчас короче вот так вот делаем, вот столько моржи закладываем, получается, что вообще на 5 рублей туда-сюда можно сходить, это прям звучит круто. Ты такой, ты захочешь купить, ну посмотри, ты же хочешь? Селс говорит, ну вообще да, давай попробуем. И они идут это пичить, продавать и так далее. И потом есть разные корпоративные истории. Опять же, в канале у меня есть несколько историй про то, что есть два типа селзов, те, которые работают с институциональными трейдерами, давай так сказать. Это банки, страховые компании, в общем, кто-то, кто что-то понимает в торговле. И с корпоративными клиентами это какие-то просто бизнесы, которые занимаются чем-то производством, например, каким-то. У них есть заказы из-за рубежа, например, они хотят хеджировать свои валютные риски. Ты можешь для них разные инструменты продавать. Ты идешь к этим сейлзам, к тем сейлзам, говоришь, что спрашивают, как ты думаешь, что можем еще начать делать. выясняешь вот эти все вещи, пытаешься понять, что ты можешь запрограммировать из этого быстрее всего, делаешь и все, у вас как бы пошел новый бизнес по факту. То есть вы чем-то новым начинаете торговать. Вот. Опять же у тебя и всегда должен быть вот этот навык пойти с кем-то договориться, что-то там как-то сделать по-новому, чтобы они там для тебя подготовили какую-то платформочку, или там узнать какие-то новости, к чему готовиться, как-то быть всё время в курсе в теме того, что происходит. Вот этим всем я занимался, а дальше меня просто позвали... меня позвали, говорят, будете играющим тренером. То есть будешь программировать, будешь командой руководить, и вообще все у тебя будет круто. Я подумал, что ну почему бы и нет, звучит прикольно. В команде три человека всего, сто пудов справлюсь. Надо, надо идти. Совершенно не знал, что делать. В небольшой растерянности находился и думаю, блин, а как вот подступиться вообще? С чего начать? И первое с чего начать, надо к собеседованию подготовиться, чтобы там не говорить всякую чушь, чтобы вообще на работу взяли. Чтобы это сделать, я написал человеку из Twitter, которого не знал даже тогда. Он известен тем, что автор канала «Господин Архитектор» в «Телеграме» и сетево некоторых компаний. он вообще удивился конечно что я с такими вопросами пришел но подсказал что-то проконсультировал успокоил меня дал мне книжку почитать очень классную интересную супер книжка называется fast management если вам интересно вкатиться очень быстро то реально fast книжка такой fast track прочитал пришел на работу начал работать в итоге Бизнес условия, так скажем, и заменились, и у меня не очень получается играть, как у тренера. Получается быть только тренером. И команды уже получается две, хотя была одна, и было три человека, а получилось 12. Но это уже такая немножко другая история, как мы к этому пришли. Я хотел тут, может быть, пока мы не перешли совсем в менеджмент, еще остановиться на теме вот этом центре математических финансов, правильно я его называю? То есть, что это такое? Почему ты туда пошел? Подтягивайте свои финансовые навыки. Я к тому, что, ну то есть, тебе не хватало для работы понимания того, что такое опцион. не знаю, фьючерс, да, либо нет, либо что это такое, расскажи пожалуйста, чем ты там занимался в этом секретном центре финансовых технологий звучит очень действительно секретно как-то нет, центр совсем не секретный, я постоянно рекламирую в канале, когда там наборы происходят или когда я там что-то помогаю ребятам делать это бесплатный кружок, когда-то был в МГУ, мне кажется Просто кружок на кафедре стихостических процессов, если я правильно помню Я не очень хорошо помню про МГУ, потому что я не из МГУ Этот кружок перерос в то, что ребята стали кого-то обучать, не просто друг другу рассказывать какие-то интересные вещи про финансы, а еще и обучать студентов. И дальше они переместились в высшую школу экономики, и там последние несколько лет они совсем отсоединились от всех институтов. Это просто самостоятельная организация, она вообще бесплатная, туда приходят люди из индустрии. Например, там есть ребята, которые... управляющие хедж фондами технические директора, ну не хедж фондами, давайте так, proprietary trading firm, наверное это более правильно. Есть ребята, которые работают, ну или работали по крайней мере трейдерами и синиртрейдерами в том числе в больших банках российских, там и buy side и sell side ребята представлены, кто понимает о чем я. Надеюсь кто-то понимает. А можно расшифровать на тех, вот на меня, которые не понимают о чем ты? Значит, смотри, есть два типа компаний, которые торгуют на рынке. Это сел сайт, в котором я работал. И в основном бизнес этих компаний заключается в том, чтобы... по сути, забирать в обмен на комиссию риск с каких-то своих клиентов. Например, ты платишь зарплаты за рубежом, у тебя там почему-то есть в Индии центр разработки, и ты говоришь, у меня вот есть валютный риск. рубля к рубии, я в рублях зарабатываю, а в рублях платить зарплаты. Мне надо как-то от этого риска избавиться, я не хочу этим заниматься, я не разбираюсь в финансах. Ты говоришь, приходишь в банк и говоришь, вот давайте вы с этим разберетесь, я вам за это готов заплатить небольшую премию. Или большую, но в основном небольшую. Иначе можно прийти в другой банк. Дальше банк просто забирает этот риск к себе и как-то им управляет. им управляет и задача банка те деньги которые ему заплатили за то чтобы банк этот риск забрал не растратить целиком а есть байсайд ребята это те кто торгуют так называемые про прайтер и трейдинг стратегии это то что все обычно думают когда ты говоришь про торговые стратегии типа сейчас куплю дешево продам дорого не знаю куплю Волатильность, продам волатильность, все будет круто. Сейчас составлю красивую такую, там, не знаю, какую-то кондора из опционов, и он почему-то мне заработает деньги. Вот, обычно. Обывательское представление такое, вот если вы представляете такого, как такую компанию такого человека, это байсайт. То есть у них задача заработать именно на том, что они умные. или быстрые, ну или с кем-то договорились. Так, и чем занимаемся в этом центре? То есть получается, что это как бы курс на добровольных началах. И там чему обучают-то? Обучают математическим финансам, собственно. Я сам... В той чебанке слушал кучу всяких лекций, я еще там был по программе для студентов, у нас были дополнительные обучалки, которых не было у всех остальных. Плюс там был такой замечательный человек Артем Бакулин, который прочитал офигительные лекции, он их должен был открытый доступ выложить, это просто несправедливо, что их нет. Он очень классные лекции прочитал, про какие-то базовые простые... валютные деривативы, про фьючерсы на очень простом уровне, про опционы, про, собственно, спот сделки. Это вот, прочни мгновенный обмен валюты, считай, это спот. Много рассказывал, чем отличается одно от другого, временная стоимость денег, и ты там начинаешь понимать, как работают кредиты, центральные банки. Если ты еще пройдешь курс макроэкономики сверху, то совсем все хорошо становится, такая картинка мира появляется в голове, приятная, все сразу так. гораздо понятнее. Я даже ходил, преподавал в МГУ, у нас был курс от Deutsche Bank про математические финансы, я часть рассказывал, и цамины принимал, но это все немножко было такое лоитовенькое, не очень глубокое, а в центре математических финансов пошли глубже, там во-первых программа меняется от года к году, поэтому не могу сказать, чему там будут учить людей, которые захотят сейчас и придут, но по факту давайте расскажу какие-то классные прям вещи, которые меня зацепили, что там есть интересного. Там могут рассказать курс про микроструктуру рынка, у меня его не было, но я читал книжки, потому что мы на работе использовали ее для торговли с под сделками в опять же вот этот high frequency строительника машинка. Потом там был курс про, в принципе, деривативы, то есть, что, как работает, ну такой я бы смог прочитать, в принципе. Был про опционы, очень классный курс, и даже не один. Есть разные, один сейчас ведет мой друг, это Ролан Гриннис, приехал человек из Франции специально рассказывать. все очень круто рассказывает именно математику, то есть прям стахастические модели, как их калибровать к рынку, как их программировать самое главное и что интересно он еще рассказывает современный подход к тому как это программировать называется дифференциальное программирование, оно отличается от расчетов на сетке, например, которые мы делали в Райфе сначала, потом перешли тоже на дифференциальное. Потом есть, собственно, курсы по статистике, которые приложены к финансам. Как жирные хвосты считаются, какие бывают распределения, как моделируются хвосты, если это Risk Management, например, те интересны хвосты, а середины распределения очень интересны. То есть, там есть теория экстремальных значений. Есть курс, очень крутой курс. Опять же, мой друг Антон... читает как торговать опционами вот он профессиональный сеньорный трейдер уже по моему нет сейчас он уже вообще начальник торгового деска и он на момент когда мы познакомились как раз работал трейдером был контрагентом нашим он против нас торговал и я как раз пришел в центр математических финансов и не палился чтобы он не увидел мою фамилию очень классно именно как трейдеры думают. В чем вообще смысл торговли опционами? Почему на самом деле вся торговля опционами сводится именно к управлению рисками? И именно в опционах очень много разных рисков. Риски — это просто производные, к разным параметрам рыночным. И их много, потому что опцион — сложный продукт, у него много производных. И первого и второго порядка. и на все на них смотрят. Плюс есть отдельная история про то, что это валютная опция, и там есть свои особенности с этим связанные. Это тоже очень интересно послушать. Очень полезно все заполировать какой-нибудь книжечкой, например, FX Derivative's Trading School. Отличная книжка для того, чтобы положить ее сверху на все это. Опять же, есть курс про то, как писать торговые стратегии. То есть мы... Можно сесть, взять статью в интернете, написать бэктест и сидеть крутить, чтобы оно заработало хоть какие-то деньги хотя бы до бэктеста. Ну кто-то ж выложил статью, значит оно когда-то работало. Там есть очень интересные идеи в интернете. Прям... Ничего рабочего я так и не нашел, но очень интересно это все запрограммировать. говорят, что если взять достаточное количество идей и в правильных пропорциях смешать, оно начинает зарабатывать деньги. Я такого не видел, но говорят, что оно есть. Понятно, слушай, очень круто звучит, звучит прям целая как... Не то что даже набор курсов, а целая какая-то магистратура по такой финансовой как бы математике. Серьезные, серьезные вещи. Это не, не какое-то, знаешь, это совершенно противоположное каким-то таким... В IT курсом. Интересно, я бы сам, наверное, даже посмотрел, что это такое. Спасибо, что поделился. У меня не IT, что почему-то много вообще в образовании. Я учился, у меня диплом по хвантовой физике. Я зачем-то закончил курсы переводчиков. У меня есть диплом переводчика. И вот еще центр математических финансов. Хотел дальше продолжить говорить про менеджмент. Расскажи, как расти в команде, ну, в том плане, не как расти в команде, а как растить команду в том плане, что у тебя, ты сказал, что пришел, конечно, всего было три человека, а осталось 12. Вот что меняется, когда в команде три человека, а когда 12? И если, допустим, она еще распределенная, если, допустим, она еще, не знаю, там... фронтендеры, питанисты, джависты, плюсовики, то есть, я не знаю, все разные. Вот как расти, как вообще настраивать такую распределенную команду, где из разных, из абсолютно, из программистов из разных областей, вот про свой какой-то опыт поделись вообще, как тебе было? Тебе оно как-то чисто импатически сразу все получалось, либо ты как бы через страдания все это преодолевал? Расскажи подробнее. У меня на самом деле нет никого кроме разработчиков в команде. Но что интересно, ребята, которые со мной работают, они пишут на C++, Python и GoLang. Кстати, нет Java. Что интересно. Вопрос. Вопрос сразу же почему? Почему? Почему в джава-подкасте и у тебя из 12 человек никто не пишет на джаве? Ну, хотя бы умеет, я не знаю, ладно, ладно, не пишет, хотя бы знает, может быть. Кстати, вот это интересный факт, что у меня очень сильная команда из джавистов, которые программируют, на чем попало только не на джаве. Мой начальник, например, из одноклассников, у меня есть тоже парень из одноклассников. Есть еще двое ребят, которые работали Java программистами, они ведущие разработчики. На самом деле, все самые сильные, практически все самые сильные разработчики, они так или иначе когда-то писали на Java. Так вот получилось. А что изменилось? Сразу сразу. Что пошло не так? Почему тогда, если все нормально? Сильный разработчик с Java background? Ну ладно, ладно, на Go. Ну то есть на Go я еще как бы, я понимаю, но... Ну на Python, но на плюсах-то... Зачем же? Расскажи в общем, как ты растил команду. Так, ну я специально команду не растил. Это не то, чем ты хочешь заниматься. Давайте так. Я слышал интересную теорию про людей, которые... называемый психотип-император, человек, который хочет побольше под себя накрести людей, я вообще не понимаю, зачем это ужасно тяжело. То есть, когда у тебя трое людей, ты можешь с каждым поговорить, поставить ему задачку, сказать, вот посмотри, вот эта задачка, вот там по смартуре разложить, сказать, что вот она нужна еще вот для этого, и ты еще можешь с учетом мотивации человека сказать, что вот ты эту задачку сделаешь, например, очень сильно поможешь всей нашей дружной команде, она очень важная и мы на ревью ее отметим и тебе денег больше запросит ну и в зависимости от того, что человеку нравится или ты говоришь вот эта супер задача, ты ее сделаешь, станешь синьорным разработчиком практически очень сложная задача, ты растешь. Вот, когда у тебя три человека, ты можешь ходить ставить вот так вот задачки, упражняться в эмпатии и в том, чтобы все люди были счастливы, то какие классные ты им даешь задачи, ты можешь контролировать, что происходит вот с каждой задачей, ты говоришь, мы с тобой встретимся и Эту задачу посмотрим, как она у тебя там, ближе к концу. А потом еще раз посмотрим, когда получится или не получится. И мы с тобой вместе сядем и разберем, почему тебе не получилось. Ты можешь чаще гораздо давать обратную связь, сказать, что слушай, вот ты сегодня вот так вот на общей встрече сказал, и это могло кого-то задеть или задело кого-то. Что-то рассказываешь ему, как себя вести, надо учить. Такой, ну, родитель. можешь вот этим всем заниматься. Индивидуальные планы развития составлять будешь. Все, давай, классно. При этом тебе еще хватает времени попрограммировать, у тебя хватает времени позаниматься процессами. Вот у нас есть проектный менеджер, который в основном этим занимается. Ну, повлиять ты как-то можешь. Скрам какой-то там свой, не знаю, комбан, что тебе нравится. У меня это отдельная больная тема, о чем мне нравится. И на этом на все хватает времени. Когда людей около 10-ти становится уже тяжело, ну прям скрипеть начинаешь. Вот, когда 12-ть, уже вообще без шансов просто. На 10-ти прям тяжело, на 12-ти совсем никак, и здесь нужно уже... совсем по-другому работать. Хотел, пока мы далеко не ушли, вот ты сказал, ставить задачу по смарту для слушателей, тех, которых не знают. Расскажи, что значит ставить задачи по смарту. По уму? Типа, если перевести, типа, делай хорошо, не делай плохо? Или как? Именно так. Задачи ставятся по уму. Smart – это аббревиатура, specific – то есть должна быть конкретная задача. Я перевожу это как definition of done должен быть. То есть ты говоришь... Чёткий критерий, вот если будет выполнено, значит задача сделана. Должна быть measurable, то есть измеримая, то есть чтобы твой критерий, который ты говоришь, его можно было реально померить. Она должна быть achievable, что это реально достичь, то есть что цель ты можешь сделать. Не в том смысле, что мы не можем на альфа-централ полететь, а в том смысле, что у человека хватает ресурсов, у него хватает полномочий, у него хватает информации, чтобы это всё сделать. ты ему все дал, он ее реально может сделать, а не так, что ему придется там пойти в центр математических финансов и изучать, как торговать опционами. Вот. Дальше R это релеванс, ее по-разному расшифровывают, я предпочитаю расшифровывать ее как, зачем вообще эта задача нужна, то есть ты объясняешь человеку, почему мы ее делаем, какая польза вообще, откуда задача возникла. Ну иначе мотивация делала задачу обычно... Нет, не очень понятно. Ну блин, принесли задачу, ну и запрограммировали, ладно. Когда есть релеванс-часть, во-первых, мотивация понятна, ты понимаешь, я сейчас сделаю, будет круто. Вот мы там, не знаю, делаем новые методы оплаты, сейчас сделаем систему быстрых платежей с рекуррентами. И люди смогут в приложении один раз кнопку нажать и потом на такси ездить все время. И не будет никаких у них... проблем. Все само будет списываться, когда надо. Очень круто, очень удобно. Есть T это про время, что всегда есть Deadline, ты говоришь четко, вот когда должно быть готово. И здесь опять же я говорил вот там про две точки контроля, ты можешь использовать две точки Redline и Deadline. И Redline ты делаешь, говоришь вот смотри тебе надо вот к этому времени и он делает к этому времени. Потом вы приходите, смотрите, и ты говоришь блин, ты всё сделал не так, надо переделать за оставшееся время. И это будет дедлайн. Вот такая штука. Прикольно. Ну, то есть ты вот как бы рассказал про смартфон, то есть это целых пять пунктов. Ну, то есть чтобы просто поставить одному человеку такую задачу. То есть такую задачу и самому, когда ты уже поставил, оно уже почти выполнено. Осталось-то чего? Надеть наушники, да просто код написать. Ну, типа думать-то особо не надо, ты замотивирован. Все тебе нравится, все хорошо, очень хорошо проработанная задача Но для трех человек я еще представляю как это сделать Конечно для двенадцати это, наверное, если только не спать и... Ну, мне кажется, невозможно даже. Нужны какие-то, знаешь, как... какая-то следующая иерархия. То есть под тобой должны быть какие-то еще тимлиды, которым ты ставишь тимлидом задачу по смарту, поставить задачу по смарту другим... другим ребятам. Что-то такое. То же 12 человек, мне кажется, даже, не знаю, в книжках по менеджменту говорят, что, типа, да, что-то... что-то это многовато. Нужно... что там, две пиццы, как говорят в Амазонии, на 8 человек, что-то такое. Как ты справлялся с 12 людьми? У меня сейчас два тех, леда есть, которым я потихоньку делегирую какие-то технические вещи касательно не управления людьми, а управления конкретно проектами, чтобы они ставили задачки более конкретно и удобно. А я уже буду заниматься индивидуальными планами развития подобными вещами и мотивацией людей. А расскажи, кстати, про модели мотивации, и планы развития. Как это выглядит? Наверное, разработчикам, которые слушают наш подкаст, им тоже интересно. Может быть, кто-то и не знал, что вообще твой менеджер может тебе сделать план развития. То есть, в принципе, это входит в обязанности менеджера, и ты можешь попросить сделать свой план развития. Или хотя бы, чтобы твой менеджер делегировал кому-то еще сделать для тебя план развития. что допустим я вот пришел к тебе и говорю Валерий я вот засиделся какого-нибудь развития что бы ты что ты мне можешь предложить я пишу на джаве смотри уже 10 10 лет немножко, знаешь, уже подустал, не радует меня, ни смузи, ни массажи в офисе. Вот какие варианты есть моего развития? Ну, смотря, что ты хочешь, чем ты заниматься хочешь. То есть, тут смотри, есть разные варианты, в зависимости от того, кто к тебе пришел. Есть люди, которые... Ну, чаще всего, младшие какие-то позиции, которые достаточно... ну возьми вот эту книжку почитай, вот этот код посмотри, посмотри как вот этот человек программирует плюс вот у нас Яна Сильин ввел парное программирование у себя в команде и ребята очень довольны на самом деле потому что в паре задачи решать проще если они сложные а у нас регулярно есть какие-то сложные задачи поэтому сели двумя головами подумали очень хорошо это не обязательно выливается в код. Во-вторых, есть большой шаринг экспертизы, как конкретно по проекту, так и вот. Мне нравится, например, один из тех людей, кто очень хорошо программирует. Вот как он программирует, я также программирую. Подход именно. И когда кто-то из младших с ним сидит, он наблюдает за тем, как работает человек или... что тоже часто случается, насколько я по крайней мере наблюдал, заходя на такие сессии Человек ищет, а техлит ему говорит, как это сделать, то есть он ему прям говорит, ну поищи использование метода вот здесь Давай посмотрим, что там есть, так давай поисследуем, поразбираемся, попробуем понять, как этот кусок вообще работает именно методологические подходы, которые нигде особо не преподаются. Такая ремесленная штука в программировании, которую все сами как-то приходят. Она здесь очень сильно шарится. И это клёво. А это называется такое, наверное, наставничество. То есть ты прям говоришь, как делать человеку. Есть вариант с менторингом для таких уже более продвинутых людей подходит, которые уже там, вроде, все книжки прочитали. Но опыта не хватает. То есть именно вот приходит и говорит человек, вот у меня такая ситуация, не было у меня такой ситуации, вот что ты посоветуешь? Ну и ментор обычно рассказывает, ну слушай, я тебе как бы не знаю, что посоветовать, но у меня была похожая ситуация, я сделал вот так, получилось вот так. Ну если получилось плохо, то ты так не делай. Если получилось хорошо, можешь попробовать. Это такой менторинг, который ты можешь провести. Есть коучинг, это там для уже более... таких людей, которые и опытные, и всё знают, но как-то вот знаешь, надо откуда-то вот вытащить изнутри. Есть все ответы есть внутри у человека, но он как-то вот не отрефлексировал, не подумал, не знаю, закопался, знаешь, замотался, закрутился в работе и уже сам не думает об этом. Вот ты останавливаешься, говоришь, ну подумай сам, давай, я тебе тут, ну, не лучше тебя понимаю. Давай вот остановись, подумай, а что тут думаешь? Это тот самый разговор с уточкой. Но тут уточка такая умная, есть всякие техники, которыми я плохо владею коучинга, где там можно задавать правильные вопросы и человек будет отвечать. Смысл коучинга, насколько я для себя его понял, в том, что если человеку ты задаешь вопрос и он не может на него ответить, ты переформулируешь вопрос так, чтобы он смог на него ответить. Ну например, Дима, ты насколько хороший программист? Слушай, не знаю. А по шкале от одного до десяти. Блин, ну слушай, надо подумать. А вот Витя. Витя знаешь из соседнего отдела. Мне кажется, он хороший программист. Мне кажется, вот у него восьмерка. Твердая. Наверное, я чуть-чуть... где-то между Вити и Сережей. Вот Сережей, который сейчас вообще в офис не пришел, наверное, где-то между ними. ты можешь так помогать человеку, самому себе отвечать на вопросы но это опять же, это сколько надо времени на это стараться с индивидуальными планами развития, обычно люди приходят и они знают, что хотят вот тут все понятно тогда приходит человек и говорит, я хочу заниматься вот этим если он приходит и говорит, слушай, я не знаю, я хочу развиваться ты говоришь, ну окей, где ты хочешь быть через N лет? через три года, пять лет, не важно, зависит от того, кто к тебе пришел и что он хочет вообще, и как ты думаешь, что он может хотеть он тебе рассказывает, вот хочу там инфраструктурным разработчиком быть ты думаешь, блин, ну вообще не очень такое а что значит инфраструктурный разработчик? ну вот там, не знаю, сетевойся ты к линуксу хочу переписать, ну удачи давайте попробуем Давай попробуем найти какие-то вещи, которые тебе помогут туда приблизиться. Вы начинаете обсуждать, какие навыки нужны для того, чтобы прийти вот в эту точку. Вы смотрите, какие, пытаетесь оценить, да, может субъективно, можно объективно пригласить экспертов. Я так не делал, но в принципе можно пригласить экспертов, которые сами смогут сказать, вот, здесь. Этот человек там, столько по шкале от 1 до 10, здесь столько, ну какой-то там барчард нарисовать для тех, кто любит цифры. Можно человек спросить, сам он как думает, где у него сильнее, где у него слабее. Добавить туда свою какую-то субъективную оценку, как ты видишь. И понять, какие кусочки вы хотите прокачать. Это первое, а второе из тех, которые вы хотите, надо понять, какие вы можете прокачать в рабочих задачах. Вот у меня человек хотел стать разработчиком баз данных, работает в инфраструктуре. И приходит и говорит, ну вот хочу. Ну, с одной стороны, я, конечно, расстроен, потому что я базу данных не разрабатываю. Разработчик хороший. Хе-хе-хе. С другой стороны, если я ему ничем не помогу, он уйдет из этой базы данных писать завтра. А так он может у меня еще что-нибудь полезное сделать. И мы начинаем искать, какие задачи ему могут подойти. Что он вообще знает про базы данных. Там выясняется, ничего не знает про базы данных, например. Например. И сколь запросы писать не умеем, как работают драйвера, я не знаю, давай попробуем идти дать задачи, которые будут работать с разными базами данных. Посмотришь, там надо в драйверах какие-нибудь баги пофиксить, там надо посмотреть на шардированный постгресс, как он работает, и что с ним будет, когда упадет один из шардов. И вот эти задачи будут человеком мотивировать, они будут его развивать, и это интересно. И так можно составлять какие-то планы развития. Что можно про это почитать? Я к тому, что ты прям очень много, прям очень структурированный, хорошо прошелся по всем этим темам. Как ты, где ты черпал знания про то... вот этих вот карьерных планов и как вообще развивать, развивать своих сотрудников, разработчиков. Может быть, посоветуешь какую-то вот книгу, вот по типу фаст-менеджмента, либо какой-нибудь курс, может быть? У нас есть внутренние курсы достаточно в большом количестве, которые я не могу посоветовать. Но был курс симулятор TeamLida, который ребята из подлодки пытались запустить. В итоге я не понял, запустили они его или нет, и в каком режиме. Но в альфа-тесте я поучаствовал, какой-то фидбэк пооставлял, попроходил, там было, например, в том числе про индивидуальный план развития. Понятно. Хорошо, спасибо. А что у вас еще? Мне очень понравилось про то, что ты насильно внедрил партнерпрограммирование. Все хорошо, но если в ней слово как бы насильно звучит, прямо реально как бы устрашающе, как бы приходишь на работу, говоришь, ты теперь вот с этим. пишите код. Какие у вас еще есть нестандартные, может быть, вещи в процессах, о которых ты мог бы поделиться, кроме парного программирования? У нас вообще очень много нестандартных вещей, на самом деле. И это немножко... такой у меня бзик есть. Основное, что у нас вообще не так, как у всех, мы не пользуемся ни скрамом, ни канбаном, ну мы притворяемся скрамом чтобы никто особо не приставал. Но на самом деле мы используем Time Flow. Это штука довольно свежая, по-моему, 21-го года изобретение. Она очень похожа на... В общем, она является синтезом на самом деле двух других подходов, которые выросли из теории ограничений. Первый из них — это Kanban. И второй из них — это... Hyperproductive Knowledge Base, что-то там, короче, какая-то никому не известная методология разработки, которая существует года там с десятого, наверное, что-то такое. В общем, их скрестили какие-то очень умные люди, и получилось круто. Есть книжка, которая стоит 40 долларов. Рекомендую их потратить и прочитать. Очень классная книжка про методологию разработки. Она в принципе... А как называется, подожди, как называется? Tame flow, то есть управление потоком. Вау, звучит что-то как, знаешь, для саморазвития что-то такое. Путь к себе. Да, хорошо, продолжай. Смысл в том, что в этой книжке прикладывается теория ограничений, которая есть у Элияху в его там CL2-CL3. В общем, это... теория ограничений, как она есть, ее надо прикладывать к... ее хочется приложить к софтвер-разработке ну и там в принципе к интеллектуальному труду эта книжка прикладывает, не только к софту не очень понятно, как это сделать в общем, книжка смотрит, собственно, как это сделать, она говорит об этом более того, там есть инструкция, как перейти из того, что у вас есть сейчас, к темпфлоу и может получиться... Обещается рост пропускной способности, тут ничего не могу обещать, в отличие от автора книжки. Но по крайней мере вы начинаете делать полезные задачи, и они все подряд. То есть там есть много способов приоритизации, мой любимый это кто громче кричит, того задачи делаются. Но есть и более... полезные, так скажем, методы приоритизации, которые в частности здесь зашиты прям в систему. В общем, ну в деталях я, наверное, не буду рассказывать это долго, но смысл очень понятный. Мы берем задачу, и пока мы ее не сделали, мы не прекращаем ее делать. Вот это основная идея, которая есть внутри Tainflow. Мы не переключаемся между задачами. Второе, о чем мы делаем интересного, нестандартного. Это всё уже по мелочи. Мы, например, отказались от стендапов, которые вот лицом к лицу. Мы пишем в чатик. У нас есть специальный чатик, подсмотрен у темеледа очевидности. Что есть... что можно просто писать в чатик. Смысл тоже очень простой и обычно, обычно, когда приходишь на стендап, если у вас распределённая команда, то кто-нибудь ещё не проснулся, кто-нибудь уже засыпает. Никто никого не слушает, есть вот это мучание типа «Ээээ, чё я там делал вчера?» Ну короче, то есть ничего не запоминается, очень не структурированные рассказы. Очень много каких-то посторонних шумов и звуков информации левой И по факту я, например, после таких встреч выхожу и не понимаю, чем команда занимается Я уже не помню к концу встречи Моя персональная проблема, наверное Но тем не менее Какое предлагает обычное решение? Брать и логировать, да? То есть сидит человек и записывает за всеми Вот У нас в одной из команд так и делается, я не понимаю, что они делают Вот они приносят этот лог Я по нему ничего не понимаю вообще. То есть если я не присутствовал на стендапе, мне принесли лог, я не понимаю, что чего ребята делают совершенно не ясно. Ну это просто так типа записки такие-то там, Гриша там, не знаю, чьи дебака света, там не знаю, смотрит на предыдущий баг, ну то есть какие-то записки одного человека, правильно? Если ты был на стендапе и есть записки, то ты вспомнишь, а если ты не был, то бесполезно. Плюс иногда ты не можешь присутствовать. Болезнь, отпуск и так далее. Ты хочешь вернуться, посмотреть, что вообще было. Надо ли разбирать какие-то вещи. То есть ты мог пропустить какую-нибудь проблему. И... Которую надо бы разобрать, чтобы такого больше не было. Либо ты хочешь понять вообще, как там продвинулись, продвинулись, что происходит. Быстро вкатиться в контекст, что сейчас, кто чем занят. Э... Тут, с письменным стендапом, у тебя... Во-первых, человек сел, он сразу структурировано написал, подумал, прежде чем сказать, ну потому что это текст. Он сел, подумал, написал, если что-то забыл, он потом дописал, после, уже. И у тебя есть история. То есть ты прям идешь, смотришь, что происходит. Если есть вопросы, если возникают вещи, что-то надо поменять, какие-то внести характеровки, можно созвониться с человеком, не дёргать всех, например. Либо можно списаться. Опять же. В чем проблема письменных стендапов? Их никто не пишет. Ну и читают ли, понимаешь? Все когда-то воролись на стендап, кто не проснулся, кто, конечно, не знает, кто уже засыпает, но они все присутствуют в этом, сконцентрировано, тратят время на полчаса эти, которые есть. В письменном стендапе ты можешь там постить. Часто легко потерять вот это вот какой-то вайп. Такое, что ни лайков там нет ничего, никакого там да, круто, подбадривание какого-то. Знаешь, такой умирающий какой-то чад, где просто там делал, делаю, делаем. Делал, делаю, делаем. И все что-то делают, и никто... Ну, короче, мало, мало там эмпатии. Все-таки на таком стендапе, который лицом к лицу, там, конечно, есть кто вот так вот засыпает, которые, как бы, которым... Ну, какая-то такая человеческая, жизненная какая-то энергия. Тут из чата эмоций тяжело, тяжело считать. Там приходится как-то с Майликами, Гифками, там как-то другим способом подбады, но тоже это не всем, не всем подойдет. Ну, на самом деле здесь тоже кто-то читает, кто-то не читает. Мы сделали... Специальную встречу, на которую можно прийти, молча, чтобы ты сел и написал. Это просто, ну как блок в календаре, но с зумом. Ты можешь прийти и поговорить. Ну, если хочешь. Ты можешь. И когда мы сделали эту встречу, писать начали. Сейчас пишут. И, возможно, даже читают. Возможно. Это не факт. но точно так же, как и не факт, что слушали, когда мы стояли это да, ну хорошо, прикольно, что если вот прям заблокировать время под это, то человек чувствует, как бы, ну всё, под это время заблощено то есть я должен что-то написать за это время, нет такого, что ты не можешь сказать, я занят как-то занят, у всех оно, у всех одинаково, оно, вот это, как бы, митинг такой есть интересный, интересный подход про эмпатию у нас есть два раза в неделю Team Coffee. Это просто встреча, где можно похавать прямо перед камерой. Либо можно поболтать на них. Ну, они начинались с того, что я проводил там такие, знаешь, ретроспективы. Типа, давайте познакомимся. Вот у нас новый сотрудник появился. Вот мы сейчас поиграем в игру. Очень интересная игра. Вы делитесь на комнаты по двое. Рассказываете вот вдвоем в комнате человеку что-то про себя, какое-то интро. потом возвращаетесь все вместе и вы представляете не себя, а того с кем были в комнате. И это интересно. То есть что конкретно из того, что человек хотел рассказать, тебе показалось интересным, и ты его представишь вот так. Это гораздо веселее. И гораздо лучше люди запоминают друг друга, появляются какие-то тут... Темы пообсуждать как-то весело становится сразу. Подобных игр довольно много. И... они полезны, то есть их надо периодически проводить. Иногда мы там какие-то лекции у нас бывают, можно что-то порассказывать про то, как работают, не знаю, вот там messenger, блокчейн, что кто угодно чем занимался. У нас ребята совершенно разные бэкграунды, которые могут рассказать очень много интересных вещей. Можно просто поболтать. Например, один из ребят начал преподавать в институте курс по сетям. Он такой, блин, я готовился к семинару и узнал, что про TCP очень много нового, хотите расскажу прикол. И там начинается. Вот это интересно, весело, это помогает держать какую-то эмоциональную связь в команде. Это классно. Еще у нас есть забитое время под пивные зум-вечеринки, у нас их было штук... Может пять максимум за полгода, или за год даже. это очень плохо работает очень сложно найти вечером время на то чтобы в зуме сидеть с кем-то пиво пить. Что еще из необычного у нас есть интересная практика не всем рекомендую но интересные это написание технических дизайнов и дизайн ревью как это пропагандировали мне коллеги из мне что типа можем заменить код-ревью на дизайн-ревью, потому что какая разница, что там в коде? У тебя тесты написаны, у тебя там линтеры все проверят, тебе главное решение, правильно оно или нет, ну то есть идеологически человек правильно делает или нет, ты же не будешь баги искать глазами, тесты же должны искать, мы же все пишем тесты, да? Вот. Генирируем, генирируем тесты, сейчас больше уже не пишем, как бы копируем, спрашиваем чат GPT там, ну да, авторство мое писал не я. Вот, и ты пишешь дизайн документ, буквально там, не знаю, одно-два предложения на день разработки, что ты собираешься делать. Показываешь человеку, какому-то в команде другому он смотрит. оценивает насколько ты вообще в адеквате и то что ты предлагаешь, оно будет работать ищет какие-то корнеркейсы, ну то есть по факту делает ревью, но слов дальше когда приходит, мы не можем отказаться от pull request, потому что у нас там аудиторное регуляторное требование, что должно быть for ice review, то есть четыре человека должны, четыре глаза должны посмотреть обязательно на код один закомитил, второй запровил, как минимум Но это сильно упрощает код-ревью. Я вот захожу, там поменено 20 файлов. В какой тыкать? Вообще не понятно. Я иду в тикет, смотрю, там написано какой-то дизайн документ, я его прочитал, понял, что хотел сделать автор, что он собирался сделать в принципе. И я понимаю примерно, в какой файл мне надо тыкнуть и откуда начать разматывать вот это всё. И я понимаю код, который написан, что он там хотел вообще сделать гораздо легче. То есть чисто с когнитивной точки зрения становится гораздо проще. И код-ревью делается прям в разы быстрее. А в чем плюс? Это, опять же, сделано с точки зрения теории ограничений. Из-за того, что у нас есть проблемы, с тем, что очень много задач на входе, и не так много ресурсов, чтобы их все сделать. мы не можем себе позволить плохое качество. То есть что может произойти? Мы взяли задачку, ее разработчик начал делать, он ее делал неделю, показывает на код-ревью, а там вообще неправильно. То есть он идеологически неправильно начал делать. Надо было делать не там, или надо было делать не так, или надо было делать не то. И надо все заново переделывать. Это не пять дней, но три. Все равно много. Ты теряешь время, пропускная способность падает, ты меньше задачи делаешь. Мы немножечко в начало процесса отодвигаем. Мы смотрим, что у нас есть какой-то дизайн. Мы можем сразу сказать, что он плохой, это не будет работать. И кода там, ну может написано, не знаю, один день человек код писал. Или вообще не успел начать писать код, посмотрели его дизайн, ну, обсудили, переделали. Или бы человек пока писал, он что-то задумался, да, что-то понял. И решил, что, блин, надо пойти спросить. Пошел, спросил, сделал нормально сразу. То есть мы повышаем именно качество за счет внедрения еще одного этапа в разработку То есть как бы у тебя pipeline для одного тикета стал длиннее, потому что надо буквы печатать руками и думать головой Но по факту в среднем пропускная способность вырастает Это интересная практика Как сайд-эффект у тебя есть документация в какой-то веке Ты смотришь в код, думаешь, что за фигня, зачем вообще так сделали? Ну, бред, вообще написано бред. Ты делаешь Blame, идешь... Там тикет. К комитту пролинкован, ты идешь в тикет, там написано, почему сделали так. Такой, ааа, блин, ну спасибо вообще, очень круто. Да, круто, крутая идея. Мне кажется, что вот дизайн Doki, вот эти дизайн-ревью, они часто используются, но до достаточно больших компаний. Все-таки, типа, в средних компаниях и малых, там есть вот это вот какое-то, знаешь... Чувство, племенное чувство, когда мы знания передаем друг другу как бы каким-то, не знаю, вербальным, каким-то способом, вербально в курилке друг другу там передаем и всё такое. Всё-таки дизайн-рью – это более какой-то цивилизованный способ передавать знания и более что ли. Ну то есть, если люди уходят, дизайн-доки остаются, остаются больше просто артефактов от того, как принимались решения, что было у людей в голове. Ну, наверное, только большие компании тоже себе могут такое позволить, или видят выгоду от этого, потому что, опять же, количество людей не все так скелится. Человек не может созвониться со всеми, быстро позвонить «алло, ты зачем там вот это вот написал?» Ну, то есть, просто такая не скелится сама практика. Я понимаю, что мы уже перешагнули за полтора часа, но мне все еще пару вопросов осталось. Хотелось узнать, а где вы эти дизайнеры? Есть ли какой-то формат этого дизайн-ревью? То есть что там? Обычный трехзвенный вступление, середина, кульминация, конец? Или что? Проблема? Какие варианты решения? Дизайн-диаграммы? В конце к чему пришли? И что там? Расскажи про структуру. Как выглядит дизайн-дог обычный? Слушай, есть несколько вещей. У нас есть, во-первых, два вида тикетов. Один это проектные тикеты, когда пришел бизнес и говорит, вот надо сделать, чтобы работало. И чтоб хорошо еще было, и быстро. Вот, и я вам ничего не скажу больше. Вот, с этими тикетами отдельный flow работы, к ним отдельные требования, что там нужно посмотреть, оценить. Это по факту надо разобраться, найти все необходимые... Ну, удостовериться, что у тебя есть вся информация, что если это интеграция с внешним партнером, у тебя есть доступы, у тебя есть документация CAPI. у тебя есть люди, контакты какие-то, с кем поговорить, обсудить, задать вопросы. Ты понимаешь, зачем это делается, ты можешь оценить косты. То есть я люблю метрику cost of delay, нормированной, неважно, короче, cost of delay, сколько мы потеряем денег, если не сделаем, или если отложим эту задачу. Так получается, что мы в первую очередь берем те задачи, которые спасают нам больше всего денег. Соответственно, ты вот эти все вещи оцениваешь в этом тикете. понимаешь как-то собираешь и можешь раздробить на задачи на разработку с задачами на разработку там уже дизайн документы пишутся внутри у нас есть опять же специальная форма как заводить задачи на разработку чтобы там был definition of done и какие-то ну минимальные вещи опять же да зачем мы это делаем? почему? как? какие сроки? то есть какие-то есть форма Там прям вопросы заданы. Что будет, если мы не сделаем? Что будет, если мы не сделаем в срок? Потом там... Как поймем, что сделано? То есть надо задать вопросы, на которые человек сможет ответить нормально, а не так, что «дефинированно, в данту, чё это вообще такое?» Вопросы задаёшь, люди заполняют форму. Вот. Уже этого очень много. То есть это уже какое-то там хорошее обоснование. Вот это первая часть, которая должна быть в тикете, которую мы берём в работу. Там немного текста, там бывает типа по одной строчки на каждый пункт, и да, иногда там по два слова на каждый пункт, и все понятно. Это не должно превращаться в бюрократию радиобюрократии. Есть дальше для дизайн документа целую у нас вики страницу человек написал. Сотрудник пришел, говорит, я вот делал такую штуку в прошлой компании, сейчас расскажу. И сделал большую страницу, там написано, что, зачем, почему, как писать. Вот, но по факту не все настолько дисциплинированы, чтобы писать прям по пунктам. Там есть контекст, типа, почему вообще задача возникла, почему я ее решаю, куда я посмотрел. Ну, короче, какие-то вещи, которые тебе позволят потом вернуться к задаче и быстро вспомнить, что ты вообще делал. И почему как, ну, короче, восстановить контекст по факту. Это контекст. Его не все пишут. Следующий пункт это как я буду делать. Это обязательная вещь, у них как нельзя не написать, иначе что ревьюить? Что ты будешь делать? И третья вещь тоже очень важная, это как ты будешь тестировать. Потому что не очень понятно иногда, как протестировать. Ты что-то сейчас поменяешь, а как мы поймем, что ты сделал так, как есть там наверху написано? Но как ты будешь проверять, что то, как там написано, оно выполняется? Это вообще далеко не всегда понятно. То есть ты можешь написать, конечно, unit-тесты. Но не на всё. Иногда бывают какие-то интеграции, и ты такой, блин, ну вообще не очень понятно. Может быть, у тебя есть тестовое приложение, ты пойдёшь в тестовом приложении проверять. Может, у тебя есть какие-то тестовые стенды, на котором можно скриптами что-то подёргать, и надо там проверить. А может быть, неприятная ситуация, когда ты можешь проверить только в продакшене. Есть такие компании целые, которые вот говорят, ну нет, у нас тестовые среды, ребят. Вперёд, щас, щас. в продакшене там нормально давай ну и ты уже говоришь ну будем в продакшене тестировать вот вот такие сценарии пройдемся и вы просто по списку проверяете отлично отлично спасибо что поделился ну что пока я предлагаю перейти к рубрике не популярное мнение мы уже тут достаточно много много всего наговорили если у тебя нет нечего чего-то добавить может быть я что-то забыл у тебя спросить может Ты что-то хотел рассказать дополнительно? Что я хотел дополнительно рассказать? Что я постоянно хайрю. Пожалуйста, приходите ко мне. Если вы вдруг внезапно собеседуете в большую красную компанию, то скажите, что вы хотите в технологическую платформу, в группу платежей. Тогда переходим к непопулярному мнению. А, сейчас, секунду. Частая смена компании, я вспомню. Нет, это было из того выпуска, который уже выложено. У меня есть еще выпус, который не выложено, поэтому тебе не удастся подготовиться к этому не популярному мнению. Придется экспериментировать. Смотри, не популярное мнение такое. ГИТ очень плохой инструмент. Так, мнение действительно не популярное. Тут прям не могу не согласиться с автором. Смотря в каком контексте. Я уж не знаю, почему человек решил, что гид плохой инструмент. В плане того, как устроена система команд в гите, ну это реально ад. Вы же все пользовались, вы знаете, кому я рассказываю. Это просто... В принципе, любая консольная тула, написанная не Робом Пайком и компанией, она выглядит как гид. К сожалению, с этим приходится жить. можете попробовать в Google Cloud консоли что-нибудь написать. Это похуже упражнение, чем Git. Вот, но как система контроля версии, Git очень удобный, потому что... Ну, децентрализации мало кто пользуется, я согласен, но... Там есть мерш, там есть rebase, и ты всегда можешь устроить срач в команде, как правильно, Это же... Что еще нужно от системы контроля версий? Ну да, нужен Appianated инструмент, который вроде и хорош, но он Appianated, чтобы мы могли все о нем как бы зарубаться на кухне о том, хороший он или плохой. Ну здорово, значит у нас действительно неопопулярное мнение у предыдущего гостя. Теперь, Валерий, время для твоего неопопулярного мнения. Смотри, я тогда сейчас спрашиваю твоё непопулярное мнение, а потом ты как-то попробуй сформулировать его одним предложением, чтобы я мог где-то его там запостить, а потом просто расшифруй, можно уже подлиннее расшифровать твоё непопулярное мнение. Итак, поехали непопулярное мнение от Валерия Овчинникова. Почти всегда то, что сотрудник имеет возможность бездельничать на работе и бездельничает, это полезно для компании. По-моему, это очень непопулярное мнение. Да, неплохо. Да, действительно. А теперь объясни, поясни, поясни почему. Объяснение здесь такое. Это, кстати, очень сильно противоречит тому, по крайней мере, как я воспринимал книжки по управлению людьми. Там всегда говорят, что ты должен, как руководитель, заниматься тем, что у тебя люди не простаивают. Ну, возможно, их стоит читать просто по-другому, и это я как-то вот со своей капиталистической колокольни хотел всех заставить работать, давай деньги делай. Возможно, имелось в виду, что надо просто дать людям возможность работать бесперебойно. Почему же не стоит стараться... использовать, ну то есть 100% утилизацию человека делать, чтобы он вот, короче, 8 часов фигачивал непрерывно. Это связано очень сильно с теорией ограничений и с методологией, которую я у себя внедряю, это темпфлоу. Смысл следующий, у тебя внутри компании для каждой производственной цепочки, там от фронтэнда или мобильного приложения до какого-то самого глубокого бэкэнда есть команды разработки, которые что-то будут делать. Любая фича, практически, она вот построена из цепочки каких-то команд, которые будут заниматься разработкой. Всегда найдется в этой цепочке команда, ну просто математически хотя бы одна, ну даже на самом деле всегда только одна найдется, которая загружена сильнее всех. Вот, что ты хочешь делая, вот она будет затыком. Вот с какой скоростью она будет делать задачу, вот с той задачей давай так, да, вот эти вот все. которые заказы приходят, все что через нее проходит ограничено вот этой командой, ее пропускной способностью. Она больше переварить в принципе не может. Ты можешь вот здесь вот, до этой команды, что после нее, наделать сколько угодно вообще работы кода, написать там миллионы строк, но фича в продакшн не выйдет, пока команда вот эта вот являющаяся ограничением. она свою работу не сделает, она не может ее сделать, ну, просто физически больше, чем она делает в нормальном режиме. Соответственно, когда люди вот здесь, вот в этих командах, начинают генерировать работу на вход вот этой команде ограничений, они делают вред, потому что они копят вот здесь вот работу недоделанную. которая не будет фичу, и она не будет приносить деньги, но она будет тратить деньги. За счет чего? Ты написал код, который не работает, чем он плох. Он тестами покрыт, скорее всего. Вот, когда вы вернетесь к тому, что этот код нужно будет запускать, интегрировать и так далее, даже несмотря на то, что он покрыт тестами, все равно, скорее всего, придется его переделывать. Либо условия изменились, либо интеграция пошла не так, как ты планировал. Что-то обязательно меняется, надо переделывать. Второе, фича может вообще никогда не понадобиться и надо будет выбрасывать. Третье, у тебя код усложнился, при этом пользы никакой от этого не появилось. В четвертых, кодовая база выросла. У тебя увеличились косты и время на компиляцию, сборку, деплоймент и так далее. Пятое, у тебя из-за комплексити кода вырастает вероятность ошибки и падения. То есть ты как-то там, вот в этом вот неиспользуемом коде, вокруг него что-то там прокладываешь следующие фичи. Как какой-то там код делаешь аккуратненько. Но ты случайно задеваешь там какую-нибудь небольшую кочечку и она взрывается. Ты просто положил свой проект кодом, который не используется. Это абсолютный вред. Я уже не говорю о том, что люди поработали, ты им зарплату заплатил, а это никаких денег тебе не принесло. Гораздо полезнее будет, если человек пойдет кофе попьет вместо этого. Но есть еще более полезные занятия. которым очень любят заниматься разработчики, которым почему-то часто, по их уверениям по крайней мере, бизнес не дает. Это технический долг, это мониторинги, это все задачи, которые не требуют участия вот этой вот критической команды. То есть все, что ты можешь делать внутри своей команды замкнутым, настроить C.I., оптимизировать время компиляции, в то самое время, которое у тебя появляется из-за того, что мощность твоей команды избыточна по отношению к всей системе в целом? Да, спасибо, мне кажется это очень интересно, то есть я стал больше понимать о этом непопулярном мнении, да, спасибо. И мне кажется, что оно понравится как разработчикам, так и инжинированным менеджерам. Эти ничего не делают, а те не страдают от того, что эти ничего... То есть отличная идея. Не было у нас такого прямо... не было похоже у непопулярного меня ну что же Валерия, спасибо, это были замечательные два часа и я думаю, что можно было бы конечно еще даже наскрести где-то еще на час, у меня остались вопросы к тебе, я еще не сильно тебя мучил по поводу твоего канала, в котором ты напишешь, и не сильно углублялся в какие-то тоже там вопросы там по платежным всяким системам я знаю, что у тебя есть видео тоже на целые 2,5 часа на ютюбе, которое можно если вы еще как бы еще хотите послушать Валерия, просто на YouTube найдите Валерия Овчинникова и по-моему в канале Вастрика или на YouTube канале Вастрика, там было видео про платежные сервисы, очень-очень интересное интересное видео, узнаете что такое корреспондентский счет в банке и как он как он используется, вот я послушал, мне очень-очень понравилось спасибо тебе большое Валерии и Здорово, что ты пришел. Приходи еще, с удовольствием запишем еще выпуск. Спасибо, что позвал. Ну что же, слушайте, это был подкаст Java Swag. Подписывайтесь на нас, на подкаст в Apple подкастах, Google подкастах, Spotify. Ставьте там лайки, пишите, пишите ревью. Вот и до встречи в следующем выпуске. Всем пока.